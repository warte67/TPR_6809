                      ; ****************
                      ; * ROM_E000.asm *
                      ; ****************
                              
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                              
                      
                                              
                      
                      ; **************
                      ; * MEMORY MAP *
                      ; **************
0000                                                  org     $0000
                                                      
0000  E026            SOFT_RESET      fdb     do_RESET        ; Software RESET Vector
0002  E011            SOFT_NMI        fdb     do_NMI          ; Software NMI Vector
0004  E014            SOFT_SWI        fdb     do_SWI          ; Software SWI Vector
0006  E017            SOFT_IRQ        fdb     do_IRQ          ; Software IRQ Vector
0008  E01A            SOFT_FIRQ       fdb     do_FIRQ         ; Software FIRQ Vector
000A  E01D            SOFT_SWI2       fdb     do_SWI2         ; Software SWI2 Vector
000C  E020            SOFT_SWI3       fdb     do_SWI3         ; Software SWI3 Vector
000E  E023            SOFT_RSRVD      fdb     do_RSRV         ; Software Motorola Reserved Vector
                      
                      ; reserved system variables
0010  E07F            EXEC_VECTOR             fdb             reset                   ; execution vector 
                      
0012  00              TCSR_ROW                fcb             0                               ; current text cursor row
0013  00              TCSR_COL                fcb             0                               ; current text cursor column
0014  10              TCSR_ATTRIB             fcb             $10                             ; current cursor attribute
0015  A2              TEXT_ATTRIB             fcb             $a2                             ; current text attribute
0016  00              TCSR_ANC_ROW    fcb             0                               ; beginning row of line currently being edited
0017  00              TCSR_ANC_COL    fcb             0                               ; beginning column of line currently being edited
0018  0000            TCSR_ANC_ADR    fdb             0                               ; anchor address
001A  0000            TCSR_EDT_ADR    fdb             0                               ; address when enter was pressed during line edit
001C  02              DEF_GFX_FLAGS   fcb             $02                             ; default graphics flags        ($02)
                      
                      ;TCSR_DECAY             fdb             $0000                   ; counter delay for the cursor
001D  00              TCSR_DECAY              fcb             $00                             ; counter delay for the cursor
                      
                      
001E                                          INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_CLK_DIV     equ     $1800   ; (Byte) 60 hz Clock Divider:
                                                      ;      bit 7: 0.46875 hz
                                                      ;      bit 6: 0.9375 hz
                                                      ;      bit 5: 1.875 hz
                                                      ;      bit 4: 3.75 hz
                                                      ;      bit 3: 7.5 hz
                                                      ;      bit 2: 15.0 hz
                                                      ;      bit 1: 30.0 hz
                                                      ;      bit 0: 60.0 hz
1801                  GFX_FLAGS       equ     $1801   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1802                  GFX_AUX equ     $1802   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1803                  GFX_TIMING_W    equ     $1803   ; (Word) horizontal timing
1805                  GFX_TIMING_H    equ     $1805   ; (Word) vertical timing
1807                  GFX_PAL_INDX    equ     $1807   ; (Byte) gfx palette index (0-15)
1808                  GFX_PAL_DATA    equ     $1808   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
180A                  GFX_FG_BEGIN    equ     $180a   ; start of paged foreground gfxmode registers
180A                  GFX_FG_WDTH     equ     $180a   ; (Byte) Foreground Unit Width-1
180B                  GFX_FG_HGHT     equ     $180b   ; (Byte) Foreground Unit Height-1
180C                  GFX_FONT_IDX    equ     $180c   ; (Byte) Font Glyph Index
180D                  GFX_FONT_DAT    equ     $180d   ; (8-Bytes) Font Glyph Data Buffer
1814                  GFX_FG_END      equ     $1814   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
1815                  GFX_BG_BEGIN    equ     $1815   ; start of paged background gfxmode registers
1815                  GFX_EXT_ADDR    equ     $1815   ; (Word) 20K extended graphics addresses
1817                  GFX_EXT_DATA    equ     $1817   ; (Byte) 20K extended graphics RAM data
1818                  GFX_BG_ARG1     equ     $1818   ; (Byte) first read/write argument for the blit commands
1819                  GFX_BG_CMD      equ     $1819   ; (Byte) Blit Commands on the indexed bitmap buffer
                                                      ;      0x01: Clear Screen     (with color index in GFX_BG_ARG1)
                                                      ;      0x02: unassigned
                                                      ;      0x03: unassigned
                                                      ;      0x04: Scroll Left      (by pixels x GFX_BG_ARG1)
                                                      ;      0x05: Scroll Right     (by pixels x GFX_BG_ARG1)
                                                      ;      0x06: Scroll Up        (by pixels x GFX_BG_ARG1)
                                                      ;      0x07: Scroll Down      (by pixels x GFX_BG_ARG1)
                                                      ;      0x08: Copy Buffer      (From Active to Inactive)
1819                  GFX_BG_END      equ     $1819   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
181A                  CSR_BEGIN       equ     $181a   ; start of mouse cursor hardware registers
181A                  CSR_XPOS        equ     $181a   ; (Word) horizontal mouse cursor coordinate
181C                  CSR_YPOS        equ     $181c   ; (Word) vertical mouse cursor coordinate
181E                  CSR_XOFS        equ     $181e   ; (Byte) horizontal mouse cursor offset
181F                  CSR_YOFS        equ     $181f   ; (Byte) vertical mouse cursor offset
1820                  CSR_SIZE        equ     $1820   ; (Byte) cursor size (0-15) 0:off
1821                  CSR_SCROLL      equ     $1821   ; (Signed) MouseWheel Scroll: -1, 0, 1
1822                  CSR_FLAGS       equ     $1822   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1823                  CSR_PAL_INDX    equ     $1823   ; (Byte) mouse cursor color palette index (0-15)
1824                  CSR_PAL_DATA    equ     $1824   ; (Word) mouse cursor color palette data RGBA4444
1826                  CSR_BMP_INDX    equ     $1826   ; (Byte) mouse cursor bitmap pixel offset
1827                  CSR_BMP_DATA    equ     $1827   ; (Byte) mouse cursor bitmap pixel index color
1827                  CSR_END equ     $1827   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
1828                  DBG_BEGIN       equ     $1828   ; Start of Debugger Hardware Registers
1828                  DBG_BRK_ADDR    equ     $1828   ; (Word) Address of current breakpoint
182A                  DBG_FLAGS       equ     $182a   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
182A                  DBG_END equ     $182a   ; End of the Debugger Hardware Registers
                      
                      
182B                  GFX_END equ     $182b   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
182B                  FIO_BEGIN       equ     $182b   ; start of file i/o hardware registers
182B                  FIO_ERR_FLAGS   equ     $182b   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 4: wrong file type
                                                      ;      bit 3: directory not found
                                                      ;      bit 2: too many file handles
                                                      ;      bit 1: incorrect file handle
                                                      ;      bit 0: not yet assigned
182C                  FIO_COMMAND     equ     $182c   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
                                                      ;      $17 = SYSTEM: Shutdown
182D                  FIO_HANDLE      equ     $182d   ; (Byte) file handle or ZERO
182E                  FIO_BFROFS      equ     $182e   ; (Word) start of I/O buffer
182F                  FIO_BFRLEN      equ     $182f   ; (Word) length of I/O buffer
1831                  FIO_IODATA      equ     $1831   ; (Byte) input / output character
1832                  FIO_RET_COUNT   equ     $1832   ; (Byte) number of return entries
1833                  FIO_RET_INDEX   equ     $1833   ; (Byte) command return index
1834                  FIO_RET_BUFFER  equ     $1834   ; (Char Array 256) paged return buffer
1934                  FIO_FILEPATH    equ     $1934   ; (Char Array 256) file path and argument buffer
1A34                  FIO_END equ     $1a34   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1A35                  KEY_BEGIN       equ     $1a35   ; start of keyboard hardware registers
1A35                  CHAR_Q_LEN      equ     $1a35   ; (char) # of characters waiting in queue       (Read Only)
1A36                  CHAR_SCAN       equ     $1a36   ; read next character in queue       (not popped when read)
1A37                  CHAR_POP        equ     $1a37   ; (char) next character waiting in queue (popped when read)
1A38                  XKEY_BUFFER     equ     $1a38   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
1A48                  EDT_BFR_CSR     equ     $1a48   ; (Byte) cursor position within edit buffer    (Read/Write)
1A49                  EDT_BUFFER      equ     $1a49   ; (256 Bytes) line editing character buffer    (Read/Write)
1B49                  KEY_END equ     $1b49   ; end of keyboard hardware registers
                      
                      ;  Gamepad Hardware Registers:
1B4A                  JOYS_BEGIN      equ     $1b4a   ; start of gamepad hardware registers
1B4A                  JOYS_1_BTN      equ     $1b4a   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B4C                  JOYS_1_DBND     equ     $1b4c   ; (Byte) PAD 1 analog deadband; default is 5   (read/write)
1B4D                  JOYS_1_LTX      equ     $1b4d   ; (char) PAD 1 LThumb-X position (-128 _ +127)   (realtime)
1B4E                  JOYS_1_LTY      equ     $1b4e   ; (char) PAD 1 LThumb-Y position (-128 _ +127)   (realtime)
1B4F                  JOYS_1_RTX      equ     $1b4f   ; (char) PAD 1 RThumb-X position (-128 _ +127)   (realtime)
1B50                  JOYS_1_RTY      equ     $1b50   ; (char) PAD 1 RThumb-Y position (-128 _ +127)   (realtime)
1B51                  JOYS_1_Z1       equ     $1b51   ; (char) PAD 1 left trigger        (0 - 127)     (realtime)
1B52                  JOYS_1_Z2       equ     $1b52   ; (char) PAD 1 right trigger       (0 - 127)     (realtime)
                      
1B53                  JOYS_2_BTN      equ     $1b53   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B55                  JOYS_2_DBND     equ     $1b55   ; (Byte) PAD 2 analog deadband; default is 5   (read/write)
1B56                  JOYS_2_LTX      equ     $1b56   ; (char) PAD 2 LThumb-X position (-128 _ +127)   (realtime)
1B57                  JOYS_2_LTY      equ     $1b57   ; (char) PAD 2 LThumb-Y position (-128 _ +127)   (realtime)
1B58                  JOYS_2_RTX      equ     $1b58   ; (char) PAD 2 RThumb-X position (-128 _ +127)   (realtime)
1B59                  JOYS_2_RTY      equ     $1b59   ; (char) PAD 2 RThumb-Y position (-128 _ +127)   (realtime)
1B5A                  JOYS_2_Z1       equ     $1b5a   ; (char) PAD 2 left trigger        (0 - 127)     (realtime)
1B5B                  JOYS_2_Z2       equ     $1b5b   ; (char) PAD 2 right trigger       (0 - 127)     (realtime)
1B5C                  JOYS_END        equ     $1b5c   ; end of gamepad hardware registers
                      
                      ;  Reserved Hardware:
1B5D                  RESERVED_HDW    equ     $1b5d   ; Reserved 1182 bytes ($1B5D - $1FFB)
                      
                      ;  Memory Bank Selects (external 2MB QSPI ISSI 16Mbit SerialRAM):
                      ;  https://www.mouser.com/ProductDetail/ISSI/IS66WVS2M8BLL-104NLI?qs=doiCPypUmgFx786bHGqGiQ%3D%3D
1FFE                  RAMBANK_SEL_1   equ     $1ffe   ; (Byte)Indexes 256 x 8kb banks
1FFF                  RAMBANK_SEL_2   equ     $1fff   ; (Byte)Indexes 256 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      
                      ; ***************************************
                      ; * Read Only Sytem KERNAL ROM          *
                      ; ***************************************
                                            
                       
001E                  SECTION.CODE
E000                                          org     $E000  
                                  ;* Power On Initialization            
E000                  ROM_ENTRY   
E000  CE0200                                  LDU             #U_STK_TOP              ; top of user stack     
E003  10CE0400                                LDS     #S_STK_TOP              ; top of stack space   
E007  8EE07F                                  LDX             #reset
E00A  BF0010                                  STX             EXEC_VECTOR        
E00D  6E9F0000                    JMP     [SOFT_RESET]      
                      
                                  
                                  ;* NMI Vector Handler                     
E011  7EE029          do_NMI      JMP just_rti
                                  
                                  ;* SWI Vector Handler (do_SWI)   
E014  7EE029          do_SWI          JMP just_rti
                      
                                  ;* IRQ Vector Handler         
E017  7EE029          do_IRQ      JMP just_rti
                      
                                  ;* FIRQ Vector Handler         
E01A  7EE029          do_FIRQ     JMP just_rti
                      
                                  ;* SWI2 Vector Handler         
E01D  7EE029          do_SWI2     JMP just_rti
                      
                                  ;* SWI3 Vector Handler         
E020  7EE029          do_SWI3     JMP just_rti
                      
                                  ;* Reserved Vector Handler
E023  7EE07F          do_RSRV     JMP reset
                      
                                  ;* Reset Vector Handler         
E026  7EE07F          do_RESET    JMP reset
                                  
                      ;********************
                      ;* RESET
                      ;**************************                     
                                              
                      ; NOTES:  
                      ;
                      ;                       SYNC still needs to be implemented along with NMI, IRQ, and FIRQ handlers
                      
E029                  just_rti        
E029  3B                                      rti 
                      
E02A  2E2F61736D2F746573742E68657800 test_file       fcn             "./asm/test.hex"
                      
E039  54776F2D504920526574726F20363830390A prompt_msg      fcc             "Two-PI Retro 6809\n"
E04B  42494F53204B45524E454C20762E302E30320A                         fcc             "BIOS KERNEL v.0.02\n"
E05E  436F707972696768742032303233206279204A6179204661726965730A0A                         fcc             "Copyright 2023 by Jay Faries\n\n"
E07C  4F4B00          prompt_ready fcn        "OK"
                      
E07F                  reset           
                                              ; display the starting screen
E07F  BDE226                                  jsr             starting_screen
E082  860A                                    lda             #$0a
E084  BDE181                                  jsr             char_out
                                              ; fresh anchor
E087  B60012                                  lda             TCSR_ROW
E08A  B70016                                  sta             TCSR_ANC_ROW
E08D  B60013                                  lda             TCSR_COL
E090  B70017                                  sta             TCSR_ANC_COL
E093  7F0018                                  clr             TCSR_ANC_ADR
E096  7F0019                                  clr             TCSR_ANC_ADR+1                  
                      
                      
E099  7F001D                                  clr             TCSR_DECAY
                      
                      ;                       ldb             #$10
                      ;                       stb             TCSR_ATTRIB
                      ;                       ldd             #0
                      ;                       std             TCSR_DECAY
                      
                      ; **** main KERNEL loop **********************************************
E09C                  main_kernel
                                              ; rotate the cursor attributes
                      
E09C  B61800                                  lda             GFX_CLK_DIV             ; load the clock divisions
E09F  8408                                    anda    #%00001000              ; mask out the 0.5 hz bit
E0A1  B1001D                                  cmpa    TCSR_DECAY              ; compare with the previous clock state
E0A4  2723                                    beq             1f                              ; skip when no change                   
E0A6  B7001D                                  sta             TCSR_DECAY              ; store the new clock state
E0A9  F60014                                  ldb             TCSR_ATTRIB             ; B: current cursor attribute
E0AC  B60014                                  lda             TCSR_ATTRIB             ; A: current cursor attribute
E0AF  84F0                                    anda    #$F0                    ; mask out the background bits
E0B1  B70014                                  sta             TCSR_ATTRIB             ; store masked attribute                        
E0B4  5C                                      incb                                    ; increment the background color
E0B5  C40F                                    andb    #$0F                    ; mask out the foreground color bits
E0B7  FA0014                                  orb             TCSR_ATTRIB             ; update with the background color bits
E0BA  F70014                                  stb             TCSR_ATTRIB             ; store the new cursor attribute
                      
                                              ; mark the anchor
E0BD  B60016                                  lda     TCSR_ANC_ROW    ; A: text cursor row
E0C0  F60017                                  ldb             TCSR_ANC_COL    ; B: text cursor column
E0C3  BDE207                                  jsr             tcsr_pos_reg    ; X: calculated offset within the video buffer
E0C6  BF0018                                  stx             TCSR_ANC_ADR
                      
                      ; color the anchor character
                      ;                       ldb             #$3B                    ; anchor color attribute
                      ;                       stb             1,X                             ; highlight the anchor character
                      
E0C9                  1                       ; display the cursor
                      
E0C9  BDE1F9                                  jsr             tcsr_pos                ; fetch x from row/col
E0CC  8620                                    lda             #' '                    ; space character
E0CE  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E0D1  ED84                                    std             0,x                             ; place the cursor onto the screen
                                              
                                              ; check for a key in the queue
E0D3  B61A35                                  lda             CHAR_Q_LEN              ; load the length of the key queue
E0D6  27C4                                    beq             main_kernel             ; loop if nothing is queued
                      
                                              ; delete the old cursor
E0D8  BDE1F9                                  jsr             tcsr_pos                ; calculate X from row/col
E0DB  8620                                    lda             #' '                    ; load a blank space character
E0DD  F60015                                  ldb             TEXT_ATTRIB             ; load the current text attribute
E0E0  ED84                                    std             0,x                             ; store the colored character at X (row/col)
                                              
                                              ; display typed character
E0E2  B61A37                                  lda             CHAR_POP                ; pop the last typed character  
                      
                                              ; was [ENTER] pressed
E0E5  810D                                    cmpa    #$0D                    ; check for [ENTER]
E0E7  262F                                    bne     2f                              ; nope, that wasn't it. Skip ahead to 2
                      
E0E9  3402                                    pshs    A                               ; save the typed key
E0EB  B60012                                  lda             TCSR_ROW                ; A: current cursor row
E0EE  F60013                                  ldb             TCSR_COL                ; B: current cursor column
E0F1  BDE207                                  jsr             tcsr_pos_reg    ; X: calculated offset 
E0F4  BF001A                                  stx             TCSR_EDT_ADR    ; save as the end of the current edit buffer
                      
                      ;;                      ; color highlight the pending string 
                      ;                       ldb             #$4c            
                      ;                       ldx             TCSR_ANC_ADR                    
                      ;                       leax    1,x
                      ;99                     stb             ,x++
                      ;                       cmpx    TCSR_EDT_ADR
                      ;                       blt             99b
                      
                                              ; copy the string to the hardware buffer
E0F7  108E1A49                                ldy             #EDT_BUFFER             ; Y: current hardware edit buffer
E0FB  BE0018                                  ldx             TCSR_ANC_ADR    ; X: anchor or start of the edit string
E0FE  A681            4                       lda             ,x++                    ; load the character from the screen
E100  A7A0                                    sta             ,y+                             ; store it into the hardware edit buffer
E102  BC001A                                  cmpx    TCSR_EDT_ADR    ; check for the end of the string
E105  2DF7                                    blt             4b                              ; keep looping if not at the end
E107  6FA4                                    clr             ,y                              ; append a NULL character in the hardware buffer
E109  BDE2C4                                  jsr             execute_command ; parse and run the command                     
E10C  3502                                    puls    A                               ; A: restored Key typed
                                              
E10E  BE0012                                  ldx             TCSR_ROW
E111  BC0016                                  cmpx    TCSR_ANC_ROW
E114  2702                                    beq             2f
E116  2003                                    bra             3f
E118                  2
E118  BDE181                                  jsr             char_out                ; display the last typed character
E11B                  3
E11B  810D                                    cmpa    #$0D                    ; Was [ENTER] pressed?
E11D  261A                                    bne             2f                              ; no, move on
                      
                                              ; [ENTER] pressed                       
E11F  B60016                                  lda             TCSR_ANC_ROW
E122  F60017                                  ldb             TCSR_ANC_COL
E125  BDE207                                  jsr             tcsr_pos_reg
E128  F60015                                  ldb             TEXT_ATTRIB
E12B  E701                                    stb             1,x
                      
                                              ; move the anchor to the new cursor position
E12D  B60012                                  lda             TCSR_ROW
E130  B70016                                  sta             TCSR_ANC_ROW
E133  B60013                                  lda             TCSR_COL
E136  B70017                                  sta             TCSR_ANC_COL
E139                  2
                                              ; display the new cursor
E139  BDE1F9                                  jsr             tcsr_pos                ; fetch x from row/col
E13C  8620                                    lda             #' '                    ; space character
E13E  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E141  ED84                                    std             0,x                             ; place the cursor onto the screen              
                      
                                              ; end of main kernel loop
E143  7EE09C                                  jmp             main_kernel             ; continue the main kernel loop
                      
                      
                      ; **** SUBROUTINES ***************************************************
                      
                      
                      ; FILE SYSTEM TESTS:
                      
E146                  load_hex
E146  8607                                    lda             #$07                    ; command: LoadHex
E148  B7182C                                  sta             FIO_COMMAND             ; executre the command
E14B  B6182B                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E14E  8180                                    cmpa    #$80                    ; test for bit: file not found?
E150  2706                                    beq             1f                              ; dont call the sub if it wasnt loaded
E152  8110                                    cmpa    #$10                    ; test for bit: file not found?
E154  270A                                    beq             2f                              ; dont call the sub if it wasnt loaded
E156  200E                                    bra             9f
                      
E158                  1                       ; display, "ERROR: File Not Found!"
E158  8EE4C9                                  ldx             #strz_nofile_error
E15B  BDE1EB                                  jsr             text_out
E15E  2006                                    bra             9f
E160                  2                       ; display, "ERROR: Wrong File Type"
E160  8EE500                                  ldx             #strz_wrongfile_error
E163  BDE1EB                                  jsr             text_out
E166                  9                       ; return from subroutine
E166  39                                      rts
                      
                      
                      ; **** SYSTEM CALLS ******************************
                      
E167                  clear_text_screen       ; clear the text screen
E167  3416                                    pshs    D,X
E169  8E0400                                  ldx             #VIDEO_START
E16C  8620                                    lda             #' '
E16E  F60015                                  ldb             TEXT_ATTRIB
E171  ED81            1                       std             ,x++
E173  8C17FF                                  cmpx    #VIDEO_END
E176  23F9                                    bls             1b      
E178  3516                                    puls    D,X             
E17A  7F0012                                  clr             TCSR_ROW
E17D  7F0013                                  clr             TCSR_COL                        
E180  39                                      rts
                      
                      
E181                  char_out        ; Display character in the A register to the screen
                                              ; at the current cursor position and in the 
                                              ; current color.
E181  3436                                    pshs    D, X, Y
                      
                                              ; just return if A=null
E183  4D                                      tsta
E184  2762                                    beq             3f
E186  F60015                                  ldb             TEXT_ATTRIB
E189  8D6E                                    bsr             tcsr_pos                ; find X from Row and Col
E18B  810A                                    cmpa    #$0a
E18D  2719                                    beq             _cr
E18F  810D                                    cmpa    #$0D
E191  2715                                    beq             _cr
E193  8108                                    cmpa    #$08                    ; backspace
E195  2721                                    beq             _backspace
E197  8120                                    cmpa    #$20
E199  2D4D                                    blt             3f
                                              ; standard printable character
E19B  ED84                                    std             ,x
E19D  7C0013                                  inc             TCSR_COL
E1A0  B60013                                  lda             TCSR_COL
E1A3  B1180A                                  cmpa    GFX_FG_WDTH
E1A6  2340                                    bls             3f
E1A8                  _cr
E1A8  7F0013                                  clr             TCSR_COL
E1AB  B60012                                  lda             TCSR_ROW
E1AE  B1180B                                  cmpa    GFX_FG_HGHT
E1B1  2C0F                                    bge             _scroll
E1B3  7C0012                                  inc             TCSR_ROW
                      
E1B6  2030                                    bra             3f
E1B8                  _backspace
E1B8  B60013                                  lda             TCSR_COL
E1BB  272B                                    beq             3f
E1BD  7A0013                                  dec             TCSR_COL
                                              ;dec    EDT_BFR_CSR
E1C0  2026                                    bra             3f
                      
E1C2                  _scroll                 
E1C2  B6180A                                  lda             GFX_FG_WDTH
E1C5  4C                                      inca
E1C6  C602                                    ldb             #2
E1C8  3D                                      mul
E1C9  8E0400                                  ldx             #VIDEO_START
E1CC  308B                                    leax    d,X
E1CE  108E0400                                ldy             #VIDEO_START
E1D2  EC81            1                       ldd             ,x++
E1D4  EDA1                                    std             ,y++
E1D6  8C17FF                                  cmpx    #VIDEO_END
E1D9  2DF7                                    blt             1b
E1DB  8620                                    lda             #' '
E1DD  F60015                                  ldb             TEXT_ATTRIB
E1E0  EDA1            2                       std             ,y++
E1E2  108C17FF                                cmpy    #VIDEO_END
E1E6  2DF8                                    blt             2b
                      
E1E8  3536            3                       puls    D, X, Y
E1EA  39                                      rts
                      
E1EB                  text_out        ; output the string pointed to by X using the current attribute
E1EB  3416                                    pshs    D,X
E1ED  A680            1                       lda             ,X+             
E1EF  2705                                    beq             2f                              
E1F1  BDE181                                  jsr             char_out
E1F4  20F7                                    bra             1b
E1F6  3516            2                       puls    D,X
E1F8  39                                      rts
                      
                      
E1F9                  tcsr_pos        ; load into X according to TCSR_ROW & TCSR_COL
E1F9  3406                                    pshs    D                               ; save for later clean up
E1FB  B60012                                  lda     TCSR_ROW                ; A: cursor row
E1FE  F60013                                  ldb             TCSR_COL                ; B: cursor column
E201  BDE207                                  jsr     tcsr_pos_reg    ; X: position within the video buffer
E204  3506                                    puls    D                               ; clean up the registers
E206  39                                      rts                                             ; return
                      
                      
E207                  tcsr_pos_reg    ; load into X according to text cursor position (A:ROW, B:COL)
E207  3406                                    pshs    D                                               ; save A and B 
E209  3406                                            pshs    D                                       ; again, save A and B
E20B  8E0400                                                  ldx             #VIDEO_START    ; point X to the start of the video buffer
E20E  48                                                      lsla                                    ; account for the attribute byte
E20F  F6180A                                                  ldb             GFX_FG_WDTH             ; load the max horizontal character position
E212  5C                                                      incb                                    ; correct for width
E213  3D                                                      mul                                             ; offset the horizontial position
E214  308B                                                    leax    D,X                             ; within the video buffer
E216  3506                                            puls    D                                       ; restore A and B
E218  58                                              lslb                                            ; correct vertical to account for height
E219  3085                                            leax    b,x                                     ; offset into the video buffer
E21B  8C17FF                                          cmpx    #VIDEO_END                      ; was the video buffer exceeded
E21E  2303                                            bls             1f                                      ; branch out if not
E220  8E17FE                                          ldx             #VIDEO_END-1            ; point X to the very last cell as an error
E223  3506            1                       puls    D                                               ; final register clean up
E225  39                                      rts                                                             ; return
                      
E226                  starting_screen ; clear and display the starting screen condition
                                      ; load the default graphics mode
E226  B6001C                                  lda             DEF_GFX_FLAGS
E229  B71801                                  sta             GFX_FLAGS
                                      ; set the text attribute default
E22C  86A2                                    lda             #$a2
E22E  B70015                                  sta             TEXT_ATTRIB     
                                      ; clear screen
E231  BDE167                                  jsr             clear_text_screen
                                      ; display the text prompt
E234  8EE039                                  ldx             #prompt_msg
E237  BDE1EB                                  jsr             text_out
                                      ; start the first anchor
E23A  B60012                                  lda             TCSR_ROW
E23D  B70016                                  sta             TCSR_ANC_ROW
E240  B60013                                  lda             TCSR_COL
E243  B70017                                  sta             TCSR_ANC_COL
E246  7F0018                                  clr             TCSR_ANC_ADR
E249  7F0019                                  clr             TCSR_ANC_ADR+1
E24C  39                                      rts
                      
E24D                  ok_prompt ; display the ready prompt
E24D  8EE07C                                  ldx             #prompt_ready
E250  BDE1EB                                  jsr             text_out
E253  860A                                    lda             #$0A
E255  BDE181                                  jsr             char_out
E258  39                                      rts
                      
E259                  text_screen_reset
                                      ; load the default graphics mode
E259  B6001C                                  lda             DEF_GFX_FLAGS
E25C  B71801                                  sta             GFX_FLAGS
                                      ; set the text attribute default
                                              ;lda            #$a2
                                              ;sta            TEXT_ATTRIB     
                                      ; clear screen
E25F  BDE167                                  jsr             clear_text_screen
                                      ; start the first anchor
E262  B60012                                  lda             TCSR_ROW
E265  B70016                                  sta             TCSR_ANC_ROW
E268  B60013                                  lda             TCSR_COL
E26B  B70017                                  sta             TCSR_ANC_COL
E26E  7F0018                                  clr             TCSR_ANC_ADR
E271  7F0019                                  clr             TCSR_ANC_ADR+1
E274  39                                      rts
                      
E275                  get_argument_attrib     ; set text attribute from cmd argument
E275  7D1934                                  tst             FIO_FILEPATH
E278  10270047                                lbeq    13f
E27C  B61934                                  lda             FIO_FILEPATH
E27F  8A20                                    ora             #$20                    ; force lower case
E281  8161                                    cmpa    #'a'
E283  2D0A                                    blt             101f
E285  8166                                    cmpa    #'f'
E287  2E06                                    bgt             101f
E289  8061                                    suba    #'a'
E28B  8B0A                                    adda    #10
E28D  200A                                    bra             102f
E28F  8130            101                     cmpa    #'0'
E291  2D30                                    blt             13f                             ; invalid, just use defaults
E293  8139                                    cmpa    #'9'
E295  2E2C                                    bgt             13f                             ; also invalid
E297  8030                                    suba    #'0'
E299  F61935          102                     ldb             FIO_FILEPATH+1
E29C  CA20                                    orb             #$20                    ; force lower case
E29E  C161                                    cmpb    #'a'
E2A0  2D0A                                    blt             103f
E2A2  C166                                    cmpb    #'f'
E2A4  2E06                                    bgt             103f
E2A6  C061                                    subb    #'a'
E2A8  CB0A                                    addb    #10
E2AA  200A                                    bra             104f
E2AC  C130            103                     cmpb    #'0'
E2AE  2D13                                    blt             13f                             ; invalid, just use defaults
E2B0  C139                                    cmpb    #'9'
E2B2  2E0F                                    bgt             13f                             ; also invalid
E2B4  C030                                    subb    #'0'
E2B6  48              104                     lsla
E2B7  48                                      lsla
E2B8  48                                      lsla
E2B9  48                                      lsla
E2BA  B70015                                  sta             TEXT_ATTRIB
E2BD  FA0015                                  orb             TEXT_ATTRIB
E2C0  F70015                                  stb             TEXT_ATTRIB
E2C3  39              13                      rts
                      
                      
                      
E2C4                  execute_command ; parse and run the string that is currently in the hardware EDT_BUFFER register
E2C4  B61A49                                  lda             EDT_BUFFER
E2C7  8120                                    cmpa    #$20
E2C9  1027018E                                lbeq    1000f
                      
E2CD  860A                                    lda             #$0a
E2CF  BDE181                                  jsr             char_out
                      
                                      ; parse
E2D2  BDE482                                  jsr             lookup_cmd
                      
                                      ; switch to command
E2D5  8100                                    cmpa    #0
E2D7  1027014C                                lbeq    999f                    ; do syntax error
E2DB  8101                                    cmpa    #1                              
E2DD  10270039                                lbeq    1f                              ; do "cls"
E2E1  8102                                    cmpa    #2                              
E2E3  1027003D                                lbeq    2f                              ; do "load"
E2E7  8103                                    cmpa    #3
E2E9  10270040                                lbeq    3f                              ; do "exec"
E2ED  8104                                    cmpa    #4
E2EF  10270069                                lbeq    4f                              ; do "reset"
E2F3  8105                                    cmpa    #5
E2F5  10270069                                lbeq    5f                              ; do "exit"
E2F9  8106                                    cmpa    #6
E2FB  10270069                                lbeq    6f                              ; screen
E2FF  8107                                    cmpa    #7
E301  102700AC                                lbeq    7f                              ; dir
E305  8108                                    cmpa    #8
E307  102700C4                                lbeq    8f                              ; chdir
E30B  8109                                    cmpa    #9
E30D  102700D6                                lbeq    9f                              ; attr
E311  810A                                    cmpa    #10
E313  102700E1                                lbeq    debug_10                ; debug
E317  16010D                                  lbra    999f                            ; syntax error
                      
E31A                  1 ; cls
E31A  BDE275                                  jsr             get_argument_attrib
E31D  BDE167                                  jsr             clear_text_screen
E320  BDE24D                                  jsr             ok_prompt
E323  39                                      rts             
                      
E324                  2 ; load <arg>
E324  BDE146                                  jsr     load_hex                        
E327  8602                                    lda             #$02                    ; load the default graphics mode
E329  BDE24D                                  jsr             ok_prompt
E32C  39                                      rts
                      
E32D                  3 ; exec                        
E32D  B6182B                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E330  8480                                    anda    #$80                    ; test for bit: file not found?         
E332  4D                                      tsta    
E333  2623                                    bne             31f                             ; dont call the sub if it wasnt loaded
E335  BE0010                                  ldx             EXEC_VECTOR             ; whats in the exec vector?
E338  8CE07F                                  cmpx    #reset                  ; if its set to default
E33B  271B                                    beq             31f                             ; then skip to OK prompt
                                              
E33D  B6182A                                  lda     DBG_FLAGS               ; read debug flags
E340  843F                                    anda    #~$C0                   ; mask out debug and single step enable bits
E342  B7182A                                  sta     DBG_FLAGS               ; store debug flags
                                              
E345  AD9F0010                                jsr             [EXEC_VECTOR]   ; call the loaded subroutine
                      
E349  B61801                                  lda             GFX_FLAGS               ; check video mode
E34C  B1001C                                  cmpa    DEF_GFX_FLAGS   ; compare against defaults
E34F  2703                                    beq             32f                             ; skip the CLS if the mode hasnt changed
E351  BDE259                                  jsr             text_screen_reset
E354                  32 ; skip cls
E354  BDE24D                                  jsr             ok_prompt               
E357  39                                      rts
E358                  31 ; skip exec
E358  BDE24D                                  jsr             ok_prompt
E35B  39                                      rts
                      
                      
E35C                  4 ; reset
E35C  8600                                    lda             #$00                    ; $00 = Reset/Null
E35E  B7182C                                  sta             FIO_COMMAND             ; send the command
E361  39                                      rts
                      
                                              ;jmp            reset
                      
E362                  5 ; exit
E362  8617                                    lda             #$17                    ; $17 = SYSTEM: Shutdown
E364  B7182C                                  sta             FIO_COMMAND             ; send the command 
E367  39                                      rts
                      
E368                  6 ; screen <arg>
                                              ; $30 = 0       32x20
                                              ; $31 = 1       64x40
                                              ; $32 = 2       128x80 bitmap mode
                                              ; check the argument
E368  B61934                                  lda             FIO_FILEPATH
E36B  8130                                    cmpa    #'0'                    ; mode 0 = 32x20 
E36D  2712                                    beq             60f
E36F  8131                                    cmpa    #'1'                    ; mode 0 = 32x20 
E371  271E                                    beq             61f
E373  8132                                    cmpa    #'2'                    ; mode 0 = 32x20 
E375  272A                                    beq             62f
                                              ; ERROR: Argument out of Range!
E377  8EE4E1                                  ldx     #strz_range_error
E37A  BDE1EB                                  jsr             text_out
E37D  BDE24D                                  jsr             ok_prompt       
E380  39                                      rts
E381                  60 ; 32x20 text
E381  B61801                                  lda             GFX_FLAGS
E384  84FC                                    anda    #$FC                    ; mask out FG mode
E386  8A01                                    ora             #$01                    ; mask in 32 column text mode
E388  B71801                                  sta             GFX_FLAGS               ; update the display mode
E38B  B7001C                                  sta             DEF_GFX_FLAGS   ; replace the defaults
E38E  7EE35C                                  jmp             4b                              ; system: reset
E391                  61 ; 64x40 text (default)
E391  B61801                                  lda             GFX_FLAGS
E394  84FC                                    anda    #$FC                    ; mask out FG mode
E396  8A02                                    ora             #$02                    ; mask in 64 column text mode
E398  B71801                                  sta             GFX_FLAGS               ; update the display mode
E39B  B7001C                                  sta             DEF_GFX_FLAGS   ; replace the defaults
E39E  7EE35C                                  jmp             4b                              ; system: reset
                      
E3A1                  62 ; 128x80 16-color bitmap
E3A1  B61801                                  lda             GFX_FLAGS
E3A4  84FC                                    anda    #$FC                    ; mask out FG mode
E3A6  8A03                                    ora             #$03                    ; mask in 64 column text mode
E3A8  B71801                                  sta             GFX_FLAGS               ; update the display mode
E3AB  B7001C                                  sta             DEF_GFX_FLAGS   ; replace the defaults
E3AE  7EE35C                                  jmp             4b                              ; system: reset
                      
E3B1                  7 ; dir
E3B1  860C                                    lda             #$0c                    ; list files
E3B3  B7182C                                  sta             FIO_COMMAND
E3B6  4F                                      clra
E3B7  8E1834                                  ldx             #FIO_RET_BUFFER
E3BA  B71833          71                      sta             FIO_RET_INDEX   ; get the File[A]
E3BD  BDE1EB                                  jsr             text_out                ; send it to the screen
E3C0  4C                                      inca    
E3C1  B11832                                  cmpa    FIO_RET_COUNT   ; how many entries?
E3C4  26F4                                    bne             71b             
E3C6  860A                                    lda             #$0A
E3C8  BDE181                                  jsr             char_out
E3CB  BDE24D                                  jsr             ok_prompt       
E3CE  39                                      rts
                      
E3CF                  8 ; chdir
E3CF  860E                                    lda             #$0e                    ; $0E = command "CHDIR"
E3D1  B7182C                                  sta             FIO_COMMAND
E3D4  B6182B                                  lda     FIO_ERR_FLAGS
E3D7  8408                                    anda    #$08                    ; directory not found
E3D9  8108                                    cmpa    #$08
E3DB  2606                                    bne             81f                             ; nope, just end
E3DD  8EE519                                  ldx             #strz_dirnope_error
E3E0  BDE1EB                                  jsr             text_out
E3E3  BDE24D          81                      jsr             ok_prompt       
E3E6  39                                      rts
                      
E3E7                  9 ; color       
E3E7  BDE275                                  jsr             get_argument_attrib
E3EA  8E0401                                  ldx             #VIDEO_START+1
E3ED  E781            91                      stb     ,x++
E3EF  8C17FF                                  cmpx    #VIDEO_END
E3F2  23F9                                    bls             91b
                                              ;lda            #$0A
                                              ;jsr            char_out
E3F4  BDE24D                                  jsr             ok_prompt       
E3F7  39                                      rts
                                              
                                              
E3F8                  debug_10 ; debug                        
E3F8  B6182B                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E3FB  8480                                    anda    #$80                    ; test for bit: file not found?         
E3FD  4D                                      tsta    
E3FE  2623                                    bne             101f                    ; dont call the sub if it wasnt loaded
E400  BE0010                                  ldx             EXEC_VECTOR             ; whats in the exec vector?
E403  8CE07F                                  cmpx    #reset                  ; if its set to default
E406  271B                                    beq             101f                    ; then skip to OK prompt
                                              
E408  B6182A                                  lda     DBG_FLAGS               ; read debug flags
E40B  8AC0                                    ora     #$C0                    ; set debug and single step enable bits
E40D  B7182A                                  sta     DBG_FLAGS               ; store debug flags                                             
                                              
E410  AD9F0010                                jsr             [EXEC_VECTOR]   ; call the loaded subroutine
                                              
E414  B61801                                  lda             GFX_FLAGS               ; check video mode
E417  B1001C                                  cmpa    DEF_GFX_FLAGS   ; compare against defaults
E41A  2703                                    beq             102f                    ; skip the CLS if the mode hasnt changed
E41C  BDE259                                  jsr             text_screen_reset
E41F                  102 ; skip cls
E41F  BDE24D                                  jsr             ok_prompt               
E422  39                                      rts
E423                  101 ; skip exec
E423  BDE24D                                  jsr             ok_prompt
E426  39                                      rts
                      
                      
E427                  999             ; Report a Syntax Error
                      ;                       lda             #$0a
                      ;                       jsr             char_out                
E427  8EE4B9                                  ldx             #strz_syntax_error
E42A  BDE1EB                                  jsr             text_out
E42D  BDE24D                                  jsr             ok_prompt       
E430  39                                      rts
                      
E431  863A                                    lda             #':'
E433  BDE181                                  jsr             char_out
E436  8620                                    lda             #' '
E438  BDE181                                  jsr             char_out
E43B  8622                                    lda             #$22                    ; "
E43D  BDE181                                  jsr             char_out
E440  8E1A49                                  ldx             #EDT_BUFFER
E443  BDE1EB                                  jsr             text_out
E446  8622                                    lda             #$22                    ; "
E448  BDE181                                  jsr             char_out
E44B  860A                                    lda             #$0a
E44D  BDE181                                  jsr             char_out
E450  8EE07C                                  ldx             #prompt_ready
E453  BDE1EB                                  jsr             text_out
E456  860A                                    lda             #$0a
E458  BDE181                                  jsr             char_out
E45B                  1000 ; return from subroutine
E45B  39                                      rts
                      
E45C                  fetch_cl_argument       ; copy everything past the first space character to FIO_FILEPATH
E45C  3432                                    pshs    A, X, Y
E45E  8E1A49                                  ldx             #EDT_BUFFER
E461  108E1934                                ldy             #FIO_FILEPATH
E465                  1 ; look for space
E465  A680                                    lda             ,X+
E467  8120                                    cmpa    #' '
E469  2705                                    beq             2f                              ; copy the argument
E46B  8C1B48                                  cmpx    #EDT_BUFFER+255
E46E  26F5                                    bne             1b
E470                  2 ; loop through the argument
E470  6F1F                                    clr             -1,X
E472  A680                                    lda             ,X+
E474  A7A0                                    sta             ,Y+
E476  4D                                      tsta
E477  2706                                    beq             3f      
E479  108C1A33                                cmpy    #FIO_FILEPATH+255
E47D  26F1                                    bne             2b
E47F  3532            3                       puls    A, X, Y
E481  39                                      rts
                      
                      
E482                  lookup_cmd      ; return in A index of the command
                                              ; or A = 0 if command not found
E482  BDE45C                                  jsr     fetch_cl_argument
E485  3434                                    pshs    B, X, Y
E487  8601                                    lda             #1                              ; RET = 1
E489  3402                                    pshs    A                               ; push local RET onto the stack
E48B  4F                                      clra                                    ; A = Working Accumilator                       
E48C  5F                                      clrb                                    ; B = EDT_BUFFER[B] index
E48D  8E1A49                                  ldx             #EDT_BUFFER             ; X = EDT_BUFFER[0]
E490  108EE536                                ldy             #command_LUT    ; Y points to the position within the lookup table
E494                  1 ; loop:       
E494  A685                                    lda             B, X                    ; load A from EDT_BUFFER[X]                             
E496  8100                                    cmpa    #$00                    ; compare A with NULL-TERMINATION
E498  271A                                    beq             4f                              ; branch if EQUAL to success
E49A  8A20                                    ora             #$20                    ; force lower case
E49C  A1A0                                    cmpa    ,Y+                             ; compare A with command_LUT[Y]
E49E  2603                                    bne             2f                              ; branch if NOT equal to next_token
E4A0  5C                                      incb                                    ; increment index in EDT_BUFFER[B]
E4A1  20F1                                    bra             1b                              ; branch back to loop           
                                              
E4A3                  2 ; next_token:
E4A3  6CE4                                    inc             0,S                             ; increment RET
E4A5  5F                                      clrb                                    ; clear EDT_BUFFER[B] index
                                              ; move Y to the beginning of the next label
E4A6                  5 ; lp_1:
E4A6  A6A0                                    lda             ,Y+                             ; load a with the current character in the LUT
E4A8  81FF                                    cmpa    #$ff                    ; if were at the end of the LUT
E4AA  2706                                    beq             3f                              ; branch to failure
E4AC  8100                                    cmpa    #$00                    ; end of a token
E4AE  26F6                                    bne             5b                              ; keep searching if not
E4B0  20E2                                    bra             1b                              ; branch back to loop    
E4B2                  3 ; failure:
E4B2  6FE4                                    clr             0,S                             ; RET = 0
E4B4                  4 ; success:
E4B4  3502                                    puls    A                               ; recover local RET
E4B6  3534                                    puls    B, X, Y
E4B8  39                                      rts                                             ; return RET                    
                      
                      
                      
                      
E4B9  4552524F523A2053796E746178210A00 strz_syntax_error               fcn             "ERROR: Syntax!\n"
E4C9  4552524F523A2046696C65204E6F7420466F756E64210A00 strz_nofile_error               fcn             "ERROR: File Not Found!\n"
E4E1  4552524F523A20417267756D656E74206F7574206F662052616E6765210A00 strz_range_error                fcn             "ERROR: Argument out of Range!\n"
E500  4552524F523A2057726F6E672046696C652054797065210A00 strz_wrongfile_error    fcn             "ERROR: Wrong File Type!\n"
E519  4552524F523A204469726563746F7279204E6F7420466F756E64210A00 strz_dirnope_error              fcn             "ERROR: Directory Not Found!\n"
                      
                      ; console commands
E536                  command_LUT 
E536  636C7300                                fcn             "cls"                   ; 1             clear the screen
E53A  6C6F616400                              fcn             "load"                  ; 2             load a .hex file
E53F  6578656300                              fcn             "exec"                  ; 3             execute the loaded .hex file
E544  726573657400                            fcn             "reset"                 ; 4             perform a soft system reset
E54A  6578697400                              fcn             "exit"                  ; 5             exit the emulation
E54F  73637265656E00                          fcn             "screen"                ; 6             change screen modes
E556  64697200                                fcn             "dir"                   ; 7             display the files in the current directory
E55A  636400                                  fcn             "cd"                    ; 8             change directories
E55D  636F6C6F7200                            fcn             "color"                 ; 9     change default text attribute
E563  646562756700                            fcn             "debug"                 ; 10    debug the loaded .hex file
E569  FF                                      fcb             0xFF
                      
                      
                      
                      
                      ; ***********************************************************
                      
                      
                      ; interrupt vectors
FFF0                                                  org  $fff0
FFF0  E023            HARD_RSRVD      fdb  do_RSRV    ; Motorola RESERVED Hardware Interrupt Vector
FFF2  E020            HARD_SWI3       fdb  do_SWI3    ; SWI3 Hardware Interrupt Vector
FFF4  E01D            HARD_SWI2       fdb  do_SWI2    ; SWI2 Hardware Interrupt Vector
FFF6  E01A            HARD_FIRQ       fdb  do_FIRQ    ; FIRQ Hardware Interrupt Vector
FFF8  E017            HARD_IRQ        fdb  do_IRQ     ; IRQ Hardware Interrupt Vector
FFFA  E014            HARD_SWI        fdb  do_SWI     ; SWI/SYS Hardware Interrupt Vector
FFFC  E011            HARD_NMI        fdb  do_NMI     ; NMI Hardware Interrupt Vector
FFFE  E000            HARD_RESET      fdb  ROM_ENTRY  ; RESET Hardware Interrupt Vector
                      
0000                                          END
