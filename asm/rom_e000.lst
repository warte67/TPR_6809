                      ; ****************
                      ; * ROM_E000.asm *
                      ; ****************
                              
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                              
                      
                                              
                      
                      ; **************
                      ; * MEMORY MAP *
                      ; **************
0000                                                  org     $0000
                                                      
0000  E026            SOFT_RESET      fdb     do_RESET        ; Software RESET Vector
0002  E011            SOFT_NMI        fdb     do_NMI          ; Software NMI Vector
0004  E014            SOFT_SWI        fdb     do_SWI          ; Software SWI Vector
0006  E017            SOFT_IRQ        fdb     do_IRQ          ; Software IRQ Vector
0008  E01A            SOFT_FIRQ       fdb     do_FIRQ         ; Software FIRQ Vector
000A  E01D            SOFT_SWI2       fdb     do_SWI2         ; Software SWI2 Vector
000C  E020            SOFT_SWI3       fdb     do_SWI3         ; Software SWI3 Vector
000E  E023            SOFT_RSRVD      fdb     do_RSRV         ; Software Motorola Reserved Vector
                      
                      ; reserved system variables
0010  E07F            EXEC_VECTOR             fdb             reset                   ; execution vector 
                      
0012  00              TCSR_ROW                fcb             0                               ; current text cursor row
0013  00              TCSR_COL                fcb             0                               ; current text cursor column
0014  10              TCSR_ATTRIB             fcb             $10                             ; current cursor attribute
0015  A2              TEXT_ATTRIB             fcb             $a2                             ; current text attribute
0016  0000            TCSR_DECAY              fdb             $0000                   ; counter delay for the cursor
0018  00              TCSR_ANC_ROW    fcb             0                               ; beginning row of line currently being edited
0019  00              TCSR_ANC_COL    fcb             0                               ; beginning column of line currently being edited
001A  0000            TCSR_ANC_ADR    fdb             0                               ; anchor address
001C  0000            TCSR_EDT_ADR    fdb             0                               ; address when enter was pressed during line edit
001E  02              DEF_GFX_FLAGS   fcb             $02                             ; default graphics flags        ($02)
                      
001F                                          INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_FLAGS       equ     $1800   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1801                  GFX_AUX equ     $1801   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1802                  GFX_TIMING_W    equ     $1802   ; (Word) horizontal timing
1804                  GFX_TIMING_H    equ     $1804   ; (Word) vertical timing
1806                  GFX_PAL_INDX    equ     $1806   ; (Byte) gfx palette index (0-15)
1807                  GFX_PAL_DATA    equ     $1807   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
1809                  GFX_FG_BEGIN    equ     $1809   ; start of paged foreground gfxmode registers
1809                  GFX_FG_WDTH     equ     $1809   ; (Byte) Foreground Unit Width-1
180A                  GFX_FG_HGHT     equ     $180a   ; (Byte) Foreground Unit Height-1
180A                  GFX_FG_END      equ     $180a   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
180B                  GFX_BG_BEGIN    equ     $180b   ; start of paged background gfxmode registers
180B                  GFX_EXT_ADDR    equ     $180b   ; (Word) 20K extended graphics addresses
180D                  GFX_EXT_DATA    equ     $180d   ; (Byte) 20K extended graphics RAM data
180D                  GFX_BG_END      equ     $180d   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
180E                  CSR_BEGIN       equ     $180e   ; start of mouse cursor hardware registers
180E                  CSR_XPOS        equ     $180e   ; (Word) horizontal mouse cursor coordinate
1810                  CSR_YPOS        equ     $1810   ; (Word) vertical mouse cursor coordinate
1812                  CSR_XOFS        equ     $1812   ; (Byte) horizontal mouse cursor offset
1813                  CSR_YOFS        equ     $1813   ; (Byte) vertical mouse cursor offset
1814                  CSR_SIZE        equ     $1814   ; (Byte) cursor size (0-15) 0:off
1815                  CSR_SCROLL      equ     $1815   ; (Signed) MouseWheel Scroll: -1, 0, 1
1816                  CSR_FLAGS       equ     $1816   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1817                  CSR_PAL_INDX    equ     $1817   ; (Byte) mouse cursor color palette index (0-15)
1818                  CSR_PAL_DATA    equ     $1818   ; (Word) mouse cursor color palette data RGBA4444
181A                  CSR_BMP_INDX    equ     $181a   ; (Byte) mouse cursor bitmap pixel offset
181B                  CSR_BMP_DATA    equ     $181b   ; (Byte) mouse cursor bitmap pixel index color
181B                  CSR_END equ     $181b   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
181C                  DBG_BEGIN       equ     $181c   ; Start of Debugger Hardware Registers
181C                  DBG_BRK_ADDR    equ     $181c   ; (Word) Address of current breakpoint
181E                  DBG_FLAGS       equ     $181e   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
181E                  DBG_END equ     $181e   ; End of the Debugger Hardware Registers
                      
                      
181F                  GFX_END equ     $181f   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
181F                  FIO_BEGIN       equ     $181f   ; start of file i/o hardware registers
181F                  FIO_ERR_FLAGS   equ     $181f   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 0-4: not yet assigned
1820                  FIO_COMMAND     equ     $1820   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
                                                      ;      $17 = SYSTEM: Shutdown
1821                  FIO_HANDLE      equ     $1821   ; (Byte) file handle or ZERO
1822                  FIO_BFROFS      equ     $1822   ; (Word) start of I/O buffer
1823                  FIO_BFRLEN      equ     $1823   ; (Word) length of I/O buffer
1825                  FIO_SEEKOFS     equ     $1825   ; (Word) seek offset
1827                  FIO_FILEPATH    equ     $1827   ; (Char Array 256) file path and argument buffer
1927                  FIO_END equ     $1927   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1928                  KEY_BEGIN       equ     $1928   ; start of keyboard hardware registers
1928                  CHAR_Q_LEN      equ     $1928   ; (char) # of characters waiting in queue       (Read Only)
1929                  CHAR_SCAN       equ     $1929   ; read next character in queue       (not popped when read)
192A                  CHAR_POP        equ     $192a   ; (char) next character waiting in queue (popped when read)
192B                  XKEY_BUFFER     equ     $192b   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
193B                  EDT_BFR_CSR     equ     $193b   ; (Byte) cursor position within edit buffer    (Read/Write)
193C                  EDT_BUFFER      equ     $193c   ; (256 Bytes) line editing character buffer    (Read/Write)
1A3C                  KEY_END equ     $1a3c   ; end of keyboard hardware registers
                      
                      ;  Reserved Hardware:
1A3D                  RESERVED_HDW    equ     $1a3d   ; Reserved 1470 bytes ($1A3D - $1FFB)
                      
                      ;  Memory Bank Selects (16MB):
1FFC                  RAMBANK_SEL_1   equ     $1ffc   ; (Word)Indexes 65536 x 8kb banks
1FFE                  RAMBANK_SEL_2   equ     $1ffe   ; (Word)Indexes 65536 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      
                      ; ***************************************
                      ; * Read Only Sytem KERNAL ROM          *
                      ; ***************************************
                                            
                       
001F                  SECTION.CODE
E000                                          org     $E000  
                                  ;* Power On Initialization            
E000                  ROM_ENTRY   
E000  CE0200                                  LDU             #U_STK_TOP              ; top of user stack     
E003  10CE0400                                LDS     #S_STK_TOP              ; top of stack space   
E007  8EE07F                                  LDX             #reset
E00A  BF0010                                  STX             EXEC_VECTOR        
E00D  6E9F0000                    JMP     [SOFT_RESET]      
                      
                                  
                                  ;* NMI Vector Handler                     
E011  7EE029          do_NMI      JMP just_rti
                                  
                                  ;* SWI Vector Handler (do_SWI)   
E014  7EE029          do_SWI          JMP just_rti
                      
                                  ;* IRQ Vector Handler         
E017  7EE029          do_IRQ      JMP just_rti
                      
                                  ;* FIRQ Vector Handler         
E01A  7EE029          do_FIRQ     JMP just_rti
                      
                                  ;* SWI2 Vector Handler         
E01D  7EE029          do_SWI2     JMP just_rti
                      
                                  ;* SWI3 Vector Handler         
E020  7EE029          do_SWI3     JMP just_rti
                      
                                  ;* Reserved Vector Handler
E023  7EE07F          do_RSRV     JMP reset
                      
                                  ;* Reset Vector Handler         
E026  7EE07F          do_RESET    JMP reset
                                  
                      ;********************
                      ;* RESET
                      ;**************************                     
                                              
                      ; NOTES:  
                      ;
                      ;                       SYNC still needs to be implemented along with NMI, IRQ, and FIRQ handlers
                      
E029                  just_rti        
E029  3B                                      rti 
                      
E02A  2E2F61736D2F746573742E68657800 test_file       fcn             "./asm/test.hex"
                      
E039  54776F2D504920526574726F20363830390A prompt_msg      fcc             "Two-PI Retro 6809\n"
E04B  42494F53204B45524E454C20762E302E30320A                         fcc             "BIOS KERNEL v.0.02\n"
E05E  436F707972696768742032303233206279204A6179204661726965730A0A                         fcc             "Copyright 2023 by Jay Faries\n\n"
E07C  4F4B00          prompt_ready fcn        "OK"
                      
E07F                  reset           
                                              ; display the starting screen
E07F  BDE217                                  jsr             starting_screen
E082  860A                                    lda             #$0a
E084  BDE172                                  jsr             char_out
                                              ; fresh anchor
E087  B60012                                  lda             TCSR_ROW
E08A  B70018                                  sta             TCSR_ANC_ROW
E08D  B60013                                  lda             TCSR_COL
E090  B70019                                  sta             TCSR_ANC_COL
E093  7F001A                                  clr             TCSR_ANC_ADR
E096  7F001B                                  clr             TCSR_ANC_ADR+1                  
                      
                                      ; main KERNEL loop
E099  C610                                    ldb             #$10
E09B  F70014                                  stb             TCSR_ATTRIB
E09E  CC0000                                  ldd             #0
E0A1  FD0016                                  std             TCSR_DECAY
                      
E0A4                  main_kernel
                                              ; rotate the cursor attributes
E0A4  FC0016                                  ldd             TCSR_DECAY              ; load the cursor delay
E0A7  C30001                                  addd    #1                              ; increment it
E0AA  FD0016                                  std             TCSR_DECAY              ; store it      
E0AD  10830200                                cmpd    #$200                   ; check if delay has expired
E0B1  2D15                                    blt             1f                              ; skip past the color update
E0B3  7C0014                                  inc             TCSR_ATTRIB             ; increment the color attribute
E0B6  CC0000                                  ldd             #0                              ; reset the cursor delay
E0B9  FD0016                                  std             TCSR_DECAY              ; store the reset delay
                      
                                              ; mark the anchor
E0BC  B60018                                  lda     TCSR_ANC_ROW    ; A: text cursor row
E0BF  F60019                                  ldb             TCSR_ANC_COL    ; B: text cursor column
E0C2  BDE1F8                                  jsr             tcsr_pos_reg    ; X: calculated offset within the video buffer
E0C5  BF001A                                  stx             TCSR_ANC_ADR
                      
                      ;; color the anchor character
                      ;                       ldb             #$3B                    ; anchor color attribute
                      ;                       stb             1,X                             ; highlight the anchor character
                      
E0C8                  1                       ; display the cursor
                      
E0C8  BDE1EA                                  jsr             tcsr_pos                ; fetch x from row/col
E0CB  8620                                    lda             #' '                    ; space character
E0CD  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E0D0  ED84                                    std             0,x                             ; place the cursor onto the screen
                                              
                                              ; check for a key in the queue
E0D2  B61928                                  lda             CHAR_Q_LEN              ; load the length of the key queue
E0D5  27CD                                    beq             main_kernel             ; loop if nothing is queued
                      
                                              ; delete the old cursor
E0D7  BDE1EA                                  jsr             tcsr_pos                ; calculate X from row/col
E0DA  8620                                    lda             #' '                    ; load a blank space character
E0DC  F60015                                  ldb             TEXT_ATTRIB             ; load the current text attribute
E0DF  ED84                                    std             0,x                             ; store the colored character at X (row/col)
                                              
                                              ; display typed character
E0E1  B6192A                                  lda             CHAR_POP                ; pop the last typed character  
                      
                                              ; was [ENTER] pressed
E0E4  810D                                    cmpa    #$0D                    ; check for [ENTER]
E0E6  262F                                    bne     2f                              ; nope, that wasn't it. Skip ahead to 2
                      
E0E8  3402                                    pshs    A                               ; save the typed key
E0EA  B60012                                  lda             TCSR_ROW                ; A: current cursor row
E0ED  F60013                                  ldb             TCSR_COL                ; B: current cursor column
E0F0  BDE1F8                                  jsr             tcsr_pos_reg    ; X: calculated offset 
E0F3  BF001C                                  stx             TCSR_EDT_ADR    ; save as the end of the current edit buffer
                      
                      ;;                      ; color highlight the pending string 
                      ;                       ldb             #$4c            
                      ;                       ldx             TCSR_ANC_ADR                    
                      ;                       leax    1,x
                      ;99                     stb             ,x++
                      ;                       cmpx    TCSR_EDT_ADR
                      ;                       blt             99b
                      
                                              ; copy the string to the hardware buffer
E0F6  108E193C                                ldy             #EDT_BUFFER             ; Y: current hardware edit buffer
E0FA  BE001A                                  ldx             TCSR_ANC_ADR    ; X: anchor or start of the edit string
E0FD  A681            4                       lda             ,x++                    ; load the character from the screen
E0FF  A7A0                                    sta             ,y+                             ; store it into the hardware edit buffer
E101  BC001C                                  cmpx    TCSR_EDT_ADR    ; check for the end of the string
E104  2DF7                                    blt             4b                              ; keep looping if not at the end
E106  6FA4                                    clr             ,y                              ; append a NULL character in the hardware buffer
                                              ;lda            #$0a
                                              ;jsr    char_out
E108  BDE26B                                  jsr             execute_command ; parse and run the command                     
E10B  3502                                    puls    A                               ; A: restored Key typed
                                              
E10D  BE0012                                  ldx             TCSR_ROW
E110  BC0018                                  cmpx    TCSR_ANC_ROW
E113  2702                                    beq             2f
E115  2003                                    bra             3f
E117                  2
E117  BDE172                                  jsr             char_out                ; display the last typed character
E11A                  3
E11A  810D                                    cmpa    #$0D                    ; Was [ENTER] pressed?
E11C  261A                                    bne             2f                              ; no, move on
                      
                                              ; [ENTER] pressed                       
E11E  B60018                                  lda             TCSR_ANC_ROW
E121  F60019                                  ldb             TCSR_ANC_COL
E124  BDE1F8                                  jsr             tcsr_pos_reg
E127  F60015                                  ldb             TEXT_ATTRIB
E12A  E701                                    stb             1,x
                      
                                              ; move the anchor to the new cursor position
E12C  B60012                                  lda             TCSR_ROW
E12F  B70018                                  sta             TCSR_ANC_ROW
E132  B60013                                  lda             TCSR_COL
E135  B70019                                  sta             TCSR_ANC_COL
E138                  2
                                              ; display the new cursor
E138  BDE1EA                                  jsr             tcsr_pos                ; fetch x from row/col
E13B  8620                                    lda             #' '                    ; space character
E13D  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E140  ED84                                    std             0,x                             ; place the cursor onto the screen              
                      
                                              ; end of main kernel loop
E142  7EE0A4                                  jmp             main_kernel             ; continue the main kernel loop
                      
                      
                      ; **** SUBROUTINES ***************************************************
                      
                      
                      ; FILE SYSTEM TESTS:
                      
E145                  load_hex
                      ;                       ; load "test.hex"
                      ;                       ldx             #test_file              ; fetch the filename
                      ;                       ldy             #FIO_FILEPATH   ; fetch the filename hardware register storage
                      ;1
                      ;                       lda             ,x+                             ; copy a character from the source filename
                      ;                       sta             ,y+                             ; store it in the hardware register
                      ;                       bne             1b                              ; keep looping until null-termination
                      
E145  8607                                    lda             #$07                    ; command: LoadHex
E147  B71820                                  sta             FIO_COMMAND             ; executre the command
E14A  B6181F                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E14D  8180                                    cmpa    #$80                    ; test for bit: file not found?
E14F  2606                                    bne             1f                              ; dont call the sub if it wasnt loaded
                      
                                              ; display, "ERROR: File Not Found!"
E151  8EE3A0                                  ldx             #strz_nofile_error
E154  BDE1DC                                  jsr             text_out
                      
E157                  1
E157  39                                      rts
                      
                      
                      ; **** SYSTEM CALLS ******************************
                      
E158                  clear_text_screen       ; clear the text screen
E158  3416                                    pshs    D,X
E15A  8E0400                                  ldx             #VIDEO_START
E15D  8620                                    lda             #' '
E15F  F60015                                  ldb             TEXT_ATTRIB
E162  ED81            1                       std             ,x++
E164  8C17FF                                  cmpx    #VIDEO_END
E167  23F9                                    bls             1b      
E169  3516                                    puls    D,X             
E16B  7F0012                                  clr             TCSR_ROW
E16E  7F0013                                  clr             TCSR_COL                        
E171  39                                      rts
                      
                      
E172                  char_out        ; Display character in the A register to the screen
                                              ; at the current cursor position and in the 
                                              ; current color.
E172  3436                                    pshs    D, X, Y
                      
                                              ; just return if A=null
E174  4D                                      tsta
E175  2762                                    beq             3f
E177  F60015                                  ldb             TEXT_ATTRIB
E17A  8D6E                                    bsr             tcsr_pos                ; find X from Row and Col
E17C  810A                                    cmpa    #$0a
E17E  2719                                    beq             _cr
E180  810D                                    cmpa    #$0D
E182  2715                                    beq             _cr
E184  8108                                    cmpa    #$08                    ; backspace
E186  2721                                    beq             _backspace
E188  8120                                    cmpa    #$20
E18A  2D4D                                    blt             3f
                                              ; standard printable character
E18C  ED84                                    std             ,x
E18E  7C0013                                  inc             TCSR_COL
E191  B60013                                  lda             TCSR_COL
E194  B11809                                  cmpa    GFX_FG_WDTH
E197  2340                                    bls             3f
E199                  _cr
E199  7F0013                                  clr             TCSR_COL
E19C  B60012                                  lda             TCSR_ROW
E19F  B1180A                                  cmpa    GFX_FG_HGHT
E1A2  2C0F                                    bge             _scroll
E1A4  7C0012                                  inc             TCSR_ROW
                      
E1A7  2030                                    bra             3f
E1A9                  _backspace
E1A9  B60013                                  lda             TCSR_COL
E1AC  272B                                    beq             3f
E1AE  7A0013                                  dec             TCSR_COL
                                              ;dec    EDT_BFR_CSR
E1B1  2026                                    bra             3f
                      
E1B3                  _scroll                 
E1B3  B61809                                  lda             GFX_FG_WDTH
E1B6  4C                                      inca
E1B7  C602                                    ldb             #2
E1B9  3D                                      mul
E1BA  8E0400                                  ldx             #VIDEO_START
E1BD  308B                                    leax    d,X
E1BF  108E0400                                ldy             #VIDEO_START
E1C3  EC81            1                       ldd             ,x++
E1C5  EDA1                                    std             ,y++
E1C7  8C17FF                                  cmpx    #VIDEO_END
E1CA  2DF7                                    blt             1b
E1CC  8620                                    lda             #' '
E1CE  F60015                                  ldb             TEXT_ATTRIB
E1D1  EDA1            2                       std             ,y++
E1D3  108C17FF                                cmpy    #VIDEO_END
E1D7  2DF8                                    blt             2b
                      
E1D9  3536            3                       puls    D, X, Y
E1DB  39                                      rts
                      
E1DC                  text_out        ; output the string pointed to by X using the current attribute
E1DC  3416                                    pshs    D,X
E1DE  A680            1                       lda             ,X+             
E1E0  2705                                    beq             2f                              
E1E2  BDE172                                  jsr             char_out
E1E5  20F7                                    bra             1b
E1E7  3516            2                       puls    D,X
E1E9  39                                      rts
                      
                      
E1EA                  tcsr_pos        ; load into X according to TCSR_ROW & TCSR_COL
                      
E1EA  3406                                    pshs    D                               ; save for later clean up
E1EC  B60012                                  lda     TCSR_ROW                ; A: cursor row
E1EF  F60013                                  ldb             TCSR_COL                ; B: cursor column
E1F2  BDE1F8                                  jsr     tcsr_pos_reg    ; X: position within the video buffer
E1F5  3506                                    puls    D                               ; clean up the registers
E1F7  39                                      rts                                             ; return
                      
                      
E1F8                  tcsr_pos_reg    ; load into X according to text cursor position (A:ROW, B:COL)
E1F8  3406                                    pshs    D                                               ; save A and B 
E1FA  3406                                            pshs    D                                       ; again, save A and B
E1FC  8E0400                                                  ldx             #VIDEO_START    ; point X to the start of the video buffer
E1FF  48                                                      lsla                                    ; account for the attribute byte
E200  F61809                                                  ldb             GFX_FG_WDTH             ; load the max horizontal character position
E203  5C                                                      incb                                    ; correct for width
E204  3D                                                      mul                                             ; offset the horizontial position
E205  308B                                                    leax    D,X                             ; within the video buffer
E207  3506                                            puls    D                                       ; restore A and B
E209  58                                              lslb                                            ; correct vertical to account for height
E20A  3085                                            leax    b,x                                     ; offset into the video buffer
E20C  8C17FF                                          cmpx    #VIDEO_END                      ; was the video buffer exceeded
E20F  2303                                            bls             1f                                      ; branch out if not
E211  8E17FE                                          ldx             #VIDEO_END-1            ; point X to the very last cell as an error
E214  3506            1                       puls    D                                               ; final register clean up
E216  39                                      rts                                                             ; return
                      
E217                  starting_screen ; clear and display the starting screen condition
                                      ; load the default graphics mode
E217  B6001E                                  lda             DEF_GFX_FLAGS
E21A  B71800                                  sta             GFX_FLAGS
                                      ; set the text attribute default
E21D  86A2                                    lda             #$a2
E21F  B70015                                  sta             TEXT_ATTRIB     
                                      ; clear screen
E222  BDE158                                  jsr             clear_text_screen
                                      ; display the text prompt
E225  8EE039                                  ldx             #prompt_msg
E228  BDE1DC                                  jsr             text_out
                                      ; start the first anchor
E22B  B60012                                  lda             TCSR_ROW
E22E  B70018                                  sta             TCSR_ANC_ROW
E231  B60013                                  lda             TCSR_COL
E234  B70019                                  sta             TCSR_ANC_COL
E237  7F001A                                  clr             TCSR_ANC_ADR
E23A  7F001B                                  clr             TCSR_ANC_ADR+1
E23D  39                                      rts
                      
E23E                  ok_prompt ; display the ready prompt
E23E  8EE07C                                  ldx             #prompt_ready
E241  BDE1DC                                  jsr             text_out
E244  860A                                    lda             #$0A
E246  BDE172                                  jsr             char_out
E249  39                                      rts
                      
E24A                  text_screen_reset
                                      ; load the default graphics mode
E24A  B6001E                                  lda             DEF_GFX_FLAGS
E24D  B71800                                  sta             GFX_FLAGS
                                      ; set the text attribute default
E250  86A2                                    lda             #$a2
E252  B70015                                  sta             TEXT_ATTRIB     
                                      ; clear screen
E255  BDE158                                  jsr             clear_text_screen
                                      ; start the first anchor
E258  B60012                                  lda             TCSR_ROW
E25B  B70018                                  sta             TCSR_ANC_ROW
E25E  B60013                                  lda             TCSR_COL
E261  B70019                                  sta             TCSR_ANC_COL
E264  7F001A                                  clr             TCSR_ANC_ADR
E267  7F001B                                  clr             TCSR_ANC_ADR+1
E26A  39                                      rts
                      
                      
E26B                  execute_command ; parse and run the string that is currently in the hardware EDT_BUFFER register
E26B  B6193C                                  lda             EDT_BUFFER
E26E  8120                                    cmpa    #$20
E270  102700BE                                lbeq    1000f
                      
E274  860A                                    lda             #$0a
E276  BDE172                                  jsr             char_out
                      
                                      ; parse
E279  BDE359                                  jsr             lookup_cmd
                      
                                      ; [L] = test load "test.hex"
E27C  8100                                    cmpa    #0
E27E  277E                                    beq             999f                            ; do syntax error
E280  8101                                    cmpa    #1                              
E282  271A                                    beq             1f                              ; do "cls"
E284  8102                                    cmpa    #2                              
E286  2722                                    beq             2f                              ; do "load"
E288  8103                                    cmpa    #3
E28A  2727                                    beq             3f                              ; do "exec"
E28C  8104                                    cmpa    #4
E28E  2742                                    beq             4f                              ; do "reset"
E290  8105                                    cmpa    #5
E292  2744                                    beq             5f                              ; do "exit"
E294  8106                                    cmpa    #6
E296  2746                                    beq             6f                              ; do "text32"
E298  8107                                    cmpa    #7
E29A  2752                                    beq             7f                              ; do "text64"
E29C  2060                                    bra             999f                            ; syntax error
                      
E29E                  1 ; cls
E29E  86A2                                    lda             #$a2
E2A0  B70015                                  sta             TEXT_ATTRIB     
                                      ; clear screen
E2A3  BDE158                                  jsr             clear_text_screen
E2A6  BDE23E                                  jsr             ok_prompt
E2A9  39                                      rts             
                      
E2AA                  2 ; load
E2AA  BDE145                                  jsr     load_hex                        
E2AD  8602                                    lda             #$02                    ; load the default graphics mode
E2AF  BDE23E                                  jsr             ok_prompt
E2B2  39                                      rts
                      
E2B3                  3 ; exec                        
E2B3  B6181F                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E2B6  8480                                    anda    #$80                    ; test for bit: file not found?         
E2B8  4D                                      tsta    
E2B9  2613                                    bne             31f                             ; dont call the sub if it wasnt loaded
E2BB  BE0010                                  ldx             EXEC_VECTOR             ; whats in the exec vector?
E2BE  8CE07F                                  cmpx    #reset                  ; if its set to default
E2C1  270B                                    beq             31f                             ; then skip to OK prompt
E2C3  AD9F0010                                jsr             [EXEC_VECTOR]   ; call the loaded subroutine
                      
E2C7  BDE24A                                  jsr             text_screen_reset
E2CA  BDE23E                                  jsr             ok_prompt               
E2CD  39                                      rts
E2CE                  31 ; skip exec
E2CE  BDE23E                                  jsr             ok_prompt
                      ;                       ldx             #prompt_ready
                      ;                       jsr             text_out
                      ;                       lda             #$0A
                      ;                       jsr             char_out
E2D1  39                                      rts
                      
E2D2                  4 ; reset
E2D2  8600                                    lda             #$00                    ; $00 = Reset/Null
E2D4  B71820                                  sta             FIO_COMMAND             ; send the command
E2D7  39                                      rts
                      
                                              ;jmp            reset
                      
E2D8                  5 ; exit
E2D8  8617                                    lda             #$17                    ; $17 = SYSTEM: Shutdown
E2DA  B71820                                  sta             FIO_COMMAND             ; send the command 
E2DD  39                                      rts
                      
E2DE                  6 ; text32
E2DE  B61800                                  lda             GFX_FLAGS
E2E1  84FC                                    anda    #$FC                    ; mask out FG mode
E2E3  8A01                                    ora             #$01                    ; mask in 32 column text mode
E2E5  B71800                                  sta             GFX_FLAGS               ; update the display mode
E2E8  B7001E                                  sta             DEF_GFX_FLAGS   ; replace the defaults
E2EB  7EE2D2                                  jmp             4b                              ; system: reset
                      
E2EE                  7 ; text64
E2EE  B61800                                  lda             GFX_FLAGS
E2F1  84FC                                    anda    #$FC                    ; mask out FG mode
E2F3  8A02                                    ora             #$02                    ; mask in 64 column text mode
E2F5  B71800                                  sta             GFX_FLAGS               ; update the display mode
E2F8  B7001E                                  sta             DEF_GFX_FLAGS   ; replace the defaults
E2FB  7EE2D2                                  jmp             4b                              ; system reset
                      
                      
E2FE                  999             ; Report a Syntax Error
                      ;                       lda             #$0a
                      ;                       jsr             char_out                
E2FE  8EE390                                  ldx             #strz_syntax_error
E301  BDE1DC                                  jsr             text_out
                      ;                       lda             #$0a
                      ;                       jsr             char_out                
E304  BDE23E                                  jsr             ok_prompt       
E307  39                                      rts
                      
E308  863A                                    lda             #':'
E30A  BDE172                                  jsr             char_out
E30D  8620                                    lda             #' '
E30F  BDE172                                  jsr             char_out
E312  8622                                    lda             #$22                    ; "
E314  BDE172                                  jsr             char_out
E317  8E193C                                  ldx             #EDT_BUFFER
E31A  BDE1DC                                  jsr             text_out
E31D  8622                                    lda             #$22                    ; "
E31F  BDE172                                  jsr             char_out
E322  860A                                    lda             #$0a
E324  BDE172                                  jsr             char_out
E327  8EE07C                                  ldx             #prompt_ready
E32A  BDE1DC                                  jsr             text_out
E32D  860A                                    lda             #$0a
E32F  BDE172                                  jsr             char_out
E332                  1000 ; return from subroutine
E332  39                                      rts
                      
E333                  fetch_cl_argument       ; copy everything past the first space character to FIO_FILEPATH
E333  3432                                    pshs    A, X, Y
E335  8E193C                                  ldx             #EDT_BUFFER
E338  108E1827                                ldy             #FIO_FILEPATH
E33C                  1 ; look for space
E33C  A680                                    lda             ,X+
E33E  8120                                    cmpa    #' '
E340  2705                                    beq             2f                              ; copy the argument
E342  8C1A3B                                  cmpx    #EDT_BUFFER+255
E345  26F5                                    bne             1b
E347                  2 ; loop through the argument
E347  6F1F                                    clr             -1,X
E349  A680                                    lda             ,X+
E34B  A7A0                                    sta             ,Y+
E34D  4D                                      tsta
E34E  2706                                    beq             3f      
E350  108C1926                                cmpy    #FIO_FILEPATH+255
E354  26F1                                    bne             2b
E356                  3 ; done
E356  3532                                    puls    A, X, Y
E358  39                                      rts
                      
                      
E359                  lookup_cmd      ; return in A index of the command
                                              ; or A = 0 if command not found
E359  BDE333                                  jsr     fetch_cl_argument
E35C  3434                                    pshs    B, X, Y
E35E  8601                                    lda             #1                              ; RET = 1
E360  3402                                    pshs    A                               ; push local RET onto the stack
E362  4F                                      clra                                    ; A = Working Accumilator                       
E363  5F                                      clrb                                    ; B = EDT_BUFFER[B] index
E364  8E193C                                  ldx             #EDT_BUFFER             ; X = EDT_BUFFER[0]
E367  108EE3B8                                ldy             #command_LUT    ; Y points to the position within the lookup table
E36B                  1 ; loop:       
E36B  A685                                    lda             B, X                    ; load A from EDT_BUFFER[X]                             
E36D  8100                                    cmpa    #$00                    ; compare A with NULL-TERMINATION
E36F  271A                                    beq             4f                              ; branch if EQUAL to success
E371  8A20                                    ora             #$20                    ; force lower case
E373  A1A0                                    cmpa    ,Y+                             ; compare A with command_LUT[Y]
E375  2603                                    bne             2f                              ; branch if NOT equal to next_token
E377  5C                                      incb                                    ; increment index in EDT_BUFFER[B]
E378  20F1                                    bra             1b                              ; branch back to loop           
                                              
E37A                  2 ; next_token:
E37A  6CE4                                    inc             0,S                             ; increment RET
E37C  5F                                      clrb                                    ; clear EDT_BUFFER[B] index
                                              ; move Y to the beginning of the next label
E37D                  5 ; lp_1:
E37D  A6A0                                    lda             ,Y+                             ; load a with the current character in the LUT
E37F  81FF                                    cmpa    #$ff                    ; if were at the end of the LUT
E381  2706                                    beq             3f                              ; branch to failure
E383  8100                                    cmpa    #$00                    ; end of a token
E385  26F6                                    bne             5b                              ; keep searching if not
E387  20E2                                    bra             1b                              ; branch back to loop    
E389                  3 ; failure:
E389  6FE4                                    clr             0,S                             ; RET = 0
E38B                  4 ; success:
E38B  3502                                    puls    A                               ; recover local RET
E38D  3534                                    puls    B, X, Y
E38F  39                                      rts                                             ; return RET                    
                      
                      
E390  4552524F523A2053796E746178210A00 strz_syntax_error               fcn             "ERROR: Syntax!\n"
E3A0  4552524F523A2046696C65204E6F7420466F756E64210A00 strz_nofile_error               fcn             "ERROR: File Not Found!\n"
                      
E3B8                  command_LUT 
E3B8  636C7300                                fcn             "cls"                   ; 1
E3BC  6C6F616400                              fcn             "load"                  ; 2
E3C1  6578656300                              fcn             "exec"                  ; 3
E3C6  726573657400                            fcn             "reset"                 ; 4
E3CC  6578697400                              fcn             "exit"                  ; 5
E3D1  6D6F646520333200                         fcn             "mode 32"               ; 6
E3D9  6D6F646520363400                         fcn             "mode 64"               ; 7
E3E1  FF                                      fcb             0xFF
                      
                      
                      
                      
                      ; ***********************************************************
                      
                      
                      ; interrupt vectors
FFF0                                                  org  $fff0
FFF0  E023            HARD_RSRVD      fdb  do_RSRV    ; Motorola RESERVED Hardware Interrupt Vector
FFF2  E020            HARD_SWI3       fdb  do_SWI3    ; SWI3 Hardware Interrupt Vector
FFF4  E01D            HARD_SWI2       fdb  do_SWI2    ; SWI2 Hardware Interrupt Vector
FFF6  E01A            HARD_FIRQ       fdb  do_FIRQ    ; FIRQ Hardware Interrupt Vector
FFF8  E017            HARD_IRQ        fdb  do_IRQ     ; IRQ Hardware Interrupt Vector
FFFA  E014            HARD_SWI        fdb  do_SWI     ; SWI/SYS Hardware Interrupt Vector
FFFC  E011            HARD_NMI        fdb  do_NMI     ; NMI Hardware Interrupt Vector
FFFE  E000            HARD_RESET      fdb  ROM_ENTRY  ; RESET Hardware Interrupt Vector
                      
0000                                          END
