                      ; ****************
                      ; * ROM_E000.asm *
                      ; ****************
                              
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                              
                      
                                              
                      
                      ; **************
                      ; * MEMORY MAP *
                      ; **************
0000                                                  org     $0000
                                                      
0000  E020            SOFT_RESET      fdb     do_RESET        ; Software RESET Vector
0002  E00B            SOFT_NMI        fdb     do_NMI          ; Software NMI Vector
0004  E00E            SOFT_SWI        fdb     do_SWI          ; Software SWI Vector
0006  E011            SOFT_IRQ        fdb     do_IRQ          ; Software IRQ Vector
0008  E014            SOFT_FIRQ       fdb     do_FIRQ         ; Software FIRQ Vector
000A  E017            SOFT_SWI2       fdb     do_SWI2         ; Software SWI2 Vector
000C  E01A            SOFT_SWI3       fdb     do_SWI3         ; Software SWI3 Vector
000E  E01D            SOFT_RSRVD      fdb     do_RSRV         ; Software Motorola Reserved Vector
                      
                      
0010  00              var_ch                  fcb             $00
0011  00              var_at                  fcb             $00
0012  0000            var_count               fdb             $00
                      
0014                                          INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_FLAGS       equ     $1800   ; (Byte) gfx system flags:
                                                      ;      bit 7: vsync
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: debug enable
                                                      ;      bit 4: mouse cursor enable
                                                      ;      bit 3: swap backbuffers (on write)
                                                      ;      bit 0-2: graphics mode (0-7)
                                                      ;          0) NONE (just random background noise)
                                                      ;          1) Glyph Mode (512x320 or 64x40 text)
                                                      ;          2) Tile 16x16x16 mode
                                                      ;          3) 128x80 x 16-Color
                                                      ;          4) 128x160 x 4-Color
                                                      ;          5) 256x80 x 4-Color
                                                      ;          6) 256x160 x 2-Color
                                                      ;          7) 256x192 256-color  (EXTERNAL 64k BUFFER)
1801                  GFX_AUX equ     $1801   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1802                  TIMING_WIDTH    equ     $1802   ; (Word) timing width
1804                  TIMING_HEIGHT   equ     $1804   ; (Word) timing height
1806                  GFX_PAL_INDX    equ     $1806   ; (Byte) gfx palette index (0-15)
1807                  GFX_PAL_RED     equ     $1807   ; (Byte) red palette data (read/write)
1808                  GFX_PAL_GRN     equ     $1808   ; (Byte) grn palette data (read/write)
1809                  GFX_PAL_BLU     equ     $1809   ; (Byte) blu palette data (read/write)
180A                  GFX_PAL_ALF     equ     $180a   ; (Byte) alpha palette data (read/write)
                                                      ;    a special note
2000                  RESERVED_HDW    equ     $2000   ; Reserved ($2000-$1FFB)
                      
                      ;  Memory Bank Selects (16MB):
1FFC                  RAMBANK_SEL_1   equ     $1ffc   ; (Word)Indexes 65536 x 8kb banks
1FFE                  RAMBANK_SEL_2   equ     $1ffe   ; (Word)Indexes 65536 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      ; ***************************************
                      ; * Read Only Sytem KERNAL ROM          *
                      ; ***************************************
                                            
                       
0014                  SECTION.CODE
E000                                          org     $E000  
                                  ;* Power On Initialization            
E000                  ROM_ENTRY   
E000  CE0201                                  LDU             #U_STK_TOP+1            ; top of user stack     
E003  10CE0401                                LDS     #S_STK_TOP+1            ; top of stack space            
E007  6E9F0000                    JMP     [SOFT_RESET]      
                      
                                  
                                  ;* NMI Vector Handler                     
E00B  7EE023          do_NMI      JMP just_rti
                                  
                                  ;* SWI Vector Handler (do_SWI)   
E00E  7EE023          do_SWI          JMP just_rti
                      
                                  ;* IRQ Vector Handler         
E011  7EE023          do_IRQ      JMP just_rti
                      
                                  ;* FIRQ Vector Handler         
E014  7EE023          do_FIRQ     JMP just_rti
                      
                                  ;* SWI2 Vector Handler         
E017  7EE023          do_SWI2     JMP just_rti
                      
                                  ;* SWI3 Vector Handler         
E01A  7EE023          do_SWI3     JMP just_rti
                      
                                  ;* Reserved Vector Handler
E01D  7EE024          do_RSRV     JMP reset
                      
                                  ;* Reset Vector Handler         
E020  7EE024          do_RESET    JMP reset
                                  
                      ;********************
                      ;* RESET
                      ;**************************                     
                                              
                      ; NOTES:  
                      ;
                      ;                       SYNC still needs to be implemented along with NMI, IRQ, and FIRQ handlers
                      
E023                  just_rti        
E023  3B                                      rti 
                      
E024                  reset           
                      
                                              ; TESTING: fill the first 256 bytes of screen ram 
                                              ;               with ascending values to display
                      
                      ;       Byte ch = 0;
                      ;       Byte at = 0;
                      ;       Byte count = 0;
                      ;       for (int ofs = VIDEO_START; ofs <= VIDEO_END; ofs += 2)
                      ;       {
                      ;               bus->write(ofs, ch++);
                      ;               bus->write(ofs + 1, at);
                      ;               if (count++ > 8)
                      ;               {
                      ;                       at++;
                      ;                       count = 0;
                      ;               }
                      ;       }
                      
E024  7F0010                                  clr             var_ch                  ; character = 0
E027  7F0011                                  clr             var_at                  ; attribute = 0
E02A  7F0012                                  clr             var_count               ; count = 0
E02D  8E0400                                  ldx             #VIDEO_START    ; start of display buffer
E030                  1
E030  8C17FF                                  cmpx    #VIDEO_END              ; at the end of the buffer?
E033  2C1D                                    bge             2f                              ; yes, skip to the screen updates
E035  B60010                                  lda             var_ch                  ; load the current character
E038  F60011                                  ldb             var_at                  ; load the current attribute
E03B  ED81                                    std             ,x++                    ; store both character and attribute
E03D  7C0010                                  inc             var_ch                  ; next character
E040  7C0012                                  inc             var_count               ; increment count
E043  B60012                                  lda             var_count               ; load the count
E046  8111                                    cmpa    #17                             ; compare the count with this amount
E048  2DE6                                    blt             1b                              ; loop if count lower than
E04A  7C0011                                  inc             var_at                  ; next attribute
E04D  7F0012                                  clr             var_count               ; clear the count
E050  20DE                                    bra             1b                              ; resume the loop
E052                  2
                              
                      ;       for (int t = VIDEO_START; t <= VIDEO_END; t++)
                      ;               bus->write(t, bus->read(t) + 1);
                      
E052                  3
                                              ; INCREMENT THE SCREEN BUFFER
E052  8E0400                                  ldx             #VIDEO_START    ; start beginning of video buffer
E055                  4
E055  8C17FF                                  cmpx    #VIDEO_END              ; until the end of the video buffer
E058  2CF8                                    bge             3b                              ; restart when past the end
E05A  6C80                                    inc             ,x+                             ; increment character
E05C  6C80                                    inc             ,x+                             ; increment the attribute
                      
                                              ; TOGGLE THE BACKBUFFER
E05E  B61800                                  lda             GFX_FLAGS       ; load current backbuffer
E061  8808                                    eora    #$08            ; toggle it
E063  B71800                                  sta             GFX_FLAGS       ; save the backbuffer
                      
E066  20ED                                    bra             4b                              ; loop until done
                              
                      ; done          BRA     done                    ; infinate loop
                      
                      
                      
                      ; interrupt vectors
FFF0                                                  org  $fff0
FFF0  E01D            HARD_RSRVD      fdb  do_RSRV    ; Motorola RESERVED Hardware Interrupt Vector
FFF2  E01A            HARD_SWI3       fdb  do_SWI3    ; SWI3 Hardware Interrupt Vector
FFF4  E017            HARD_SWI2       fdb  do_SWI2    ; SWI2 Hardware Interrupt Vector
FFF6  E014            HARD_FIRQ       fdb  do_FIRQ    ; FIRQ Hardware Interrupt Vector
FFF8  E011            HARD_IRQ        fdb  do_IRQ     ; IRQ Hardware Interrupt Vector
FFFA  E00E            HARD_SWI        fdb  do_SWI     ; SWI/SYS Hardware Interrupt Vector
FFFC  E00B            HARD_NMI        fdb  do_NMI     ; NMI Hardware Interrupt Vector
FFFE  E000            HARD_RESET      fdb  ROM_ENTRY  ; RESET Hardware Interrupt Vector
                      
0000                                          END
