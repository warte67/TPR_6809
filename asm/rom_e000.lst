                      ; ****************
                      ; * ROM_E000.asm *
                      ; ****************
                              
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                              
                      
                                              
                      
                      ; **************
                      ; * MEMORY MAP *
                      ; **************
0000                                                  org     $0000
                                                      
0000  E020            SOFT_RESET      fdb     do_RESET        ; Software RESET Vector
0002  E00B            SOFT_NMI        fdb     do_NMI          ; Software NMI Vector
0004  E00E            SOFT_SWI        fdb     do_SWI          ; Software SWI Vector
0006  E011            SOFT_IRQ        fdb     do_IRQ          ; Software IRQ Vector
0008  E014            SOFT_FIRQ       fdb     do_FIRQ         ; Software FIRQ Vector
000A  E017            SOFT_SWI2       fdb     do_SWI2         ; Software SWI2 Vector
000C  E01A            SOFT_SWI3       fdb     do_SWI3         ; Software SWI3 Vector
000E  E01D            SOFT_RSRVD      fdb     do_RSRV         ; Software Motorola Reserved Vector
                      
0010  00              var_ch                  fcb             $00
0011  00              var_at                  fcb             $00
0012  00              var_count               fcb             $00
0013  FF              var_csr                 fcb             $ff
0040                  num_cycles              equ             $40
0014  00              var_cycle               fcb             $00
0015  00              var_mode_index  fcb             $00
                      
0016                                          INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_FLAGS       equ     $1800   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics mode (40KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 256x160 x 64-Colors (40k)
                                                      ;      bits 0-1 = 'Foreground' graphics mode (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1801                  GFX_AUX equ     $1801   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1802                  GFX_TIMING_W    equ     $1802   ; (Word) horizontal timing
1804                  GFX_TIMING_H    equ     $1804   ; (Word) vertical timing
1806                  GFX_PAL_INDX    equ     $1806   ; (Byte) gfx palette index (0-15)
1807                  GFX_PAL_DATA    equ     $1807   ; (Byte) gfx palette color bits r4g4b4a4
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
1808                  GFX_FG_BEGIN    equ     $1808   ; start of paged foreground gfxmode registers
1808                  GFX_FG_WDTH     equ     $1808   ; (Byte) Foreground Unit Width-1
1809                  GFX_FG_HGHT     equ     $1809   ; (Byte) Foreground Unit Height-1
1809                  GFX_FG_END      equ     $1809   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
180A                  GFX_BG_BEGIN    equ     $180a   ; start of paged background gfxmode registers
180A                  GFX_EXT_ADDR    equ     $180a   ; (Word) 64K extended graphics addresses
180C                  GFX_EXT_DATA    equ     $180c   ; (Byte) 64K extended graphics RAM data
180C                  GFX_BG_END      equ     $180c   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
180D                  CSR_BEGIN       equ     $180d   ; start of mouse cursor hardware registers
180D                  CSR_XPOS        equ     $180d   ; (Word) horizontal mouse cursor coordinate
180F                  CSR_YPOS        equ     $180f   ; (Word) vertical mouse cursor coordinate
1811                  CSR_XOFS        equ     $1811   ; (Byte) horizontal mouse cursor offset
1812                  CSR_YOFS        equ     $1812   ; (Byte) vertical mouse cursor offset
1813                  CSR_SIZE        equ     $1813   ; (Byte) cursor size (0-15) 0:off
1814                  CSR_SCROLL      equ     $1814   ; (Signed) MouseWheel Scroll: -1, 0, 1
1815                  CSR_FLAGS       equ     $1815   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1816                  CSR_PAL_INDX    equ     $1816   ; (Byte) mouse cursor color palette index (0-15)
1817                  CSR_PAL_DATA    equ     $1817   ; (Byte) mouse cursor color palette data RRGGBBAA
1818                  CSR_BMP_INDX    equ     $1818   ; (Byte) mouse cursor bitmap pixel offset
1819                  CSR_BMP_DATA    equ     $1819   ; (Byte) mouse cursor bitmap pixel color
1819                  CSR_END equ     $1819   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
181A                  DBG_BEGIN       equ     $181a   ; Start of Debugger Hardware Registers
181A                  DBG_BRK_ADDR    equ     $181a   ; (Word) Address of current breakpoint
181C                  DBG_FLAGS       equ     $181c   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
181C                  DBG_END equ     $181c   ; End of the Debugger Hardware Registers
                      
                      
181F                  GFX_END equ     $181f   ; end of the GFX Hardware Registers
                      
                      
                      ;  Reserved Hardware:
1820                  RESERVED_HDW    equ     $1820   ; Reserved 2011 bytes ($1820 - $1FFB)
                      
                      ;  Memory Bank Selects (16MB):
1FFC                  RAMBANK_SEL_1   equ     $1ffc   ; (Word)Indexes 65536 x 8kb banks
1FFE                  RAMBANK_SEL_2   equ     $1ffe   ; (Word)Indexes 65536 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      ; ***************************************
                      ; * Read Only Sytem KERNAL ROM          *
                      ; ***************************************
                                            
                       
0016                  SECTION.CODE
E000                                          org     $E000  
                                  ;* Power On Initialization            
E000                  ROM_ENTRY   
E000  CE0201                                  LDU             #U_STK_TOP+1            ; top of user stack     
E003  10CE0401                                LDS     #S_STK_TOP+1            ; top of stack space            
E007  6E9F0000                    JMP     [SOFT_RESET]      
                      
                                  
                                  ;* NMI Vector Handler                     
E00B  7EE023          do_NMI      JMP just_rti
                                  
                                  ;* SWI Vector Handler (do_SWI)   
E00E  7EE023          do_SWI          JMP just_rti
                      
                                  ;* IRQ Vector Handler         
E011  7EE023          do_IRQ      JMP just_rti
                      
                                  ;* FIRQ Vector Handler         
E014  7EE023          do_FIRQ     JMP just_rti
                      
                                  ;* SWI2 Vector Handler         
E017  7EE023          do_SWI2     JMP just_rti
                      
                                  ;* SWI3 Vector Handler         
E01A  7EE023          do_SWI3     JMP just_rti
                      
                                  ;* Reserved Vector Handler
E01D  7EE024          do_RSRV     JMP reset
                      
                                  ;* Reset Vector Handler         
E020  7EE024          do_RESET    JMP reset
                                  
                      ;********************
                      ;* RESET
                      ;**************************                     
                                              
                      ; NOTES:  
                      ;
                      ;                       SYNC still needs to be implemented along with NMI, IRQ, and FIRQ handlers
                      
E023                  just_rti        
E023  3B                                      rti 
                      
E024                  reset           
                      
                      
                                              ; TESTING: fill the first 256 bytes of screen ram 
                                              ;               with ascending values to display
                                              
E024  8640                                    lda             #num_cycles             ; initially clear the cycle variable
E026  B70014                                  sta             var_cycle
                      
                      ;                       ; enable backbuffer mode
                      ;                       lda             GFX_FLAGS
                      ;                       ora             #$40
                      ;                       sta             GFX_FLAGS
                      
                                              ; set up the initial graphics mode 
E029  7F0015                                  clr             var_mode_index  ; start with index 0
E02C  8EE0B9                                  ldx             #mode_data
E02F  B61800                                  lda             GFX_FLAGS
E032  84F0                                    anda    #$f0
E034  AA84                                    ora             ,x
E036  B71800                                  sta             GFX_FLAGS
                      
                      
                      ; ***********************
                      ; *  Pre-Fill and Cycle 
                      ; *  the Display Buffer
                      ; ***********************
                      
E039  7F0010                                  clr             var_ch                  ; character = 0
E03C  7F0011                                  clr             var_at                  ; attribute = 0
E03F  7F0012                                  clr             var_count               ; count = 0
E042  8E0400                                  ldx             #VIDEO_START    ; start of display buffer
E045                  1
E045  8C17FF                                  cmpx    #VIDEO_END              ; at the end of the buffer?
E048  2C1D                                    bge             2f                              ; yes, skip to the screen updates
E04A  B60010                                  lda             var_ch                  ; load the current character
E04D  F60011                                  ldb             var_at                  ; load the current attribute
E050  ED81                                    std             ,x++                    ; store both character and attribute
E052  7C0010                                  inc             var_ch                  ; next character
E055  7C0012                                  inc             var_count               ; increment count
E058  B60012                                  lda             var_count               ; load the count
E05B  8111                                    cmpa    #17                             ; compare the count with this amount
E05D  2DE6                                    blt             1b                              ; loop if count lower than
E05F  7C0011                                  inc             var_at                  ; next attribute
E062  7F0012                                  clr             var_count               ; clear the count
E065  20DE                                    bra             1b                              ; resume the loop
                      
                                              ; INCREMENT THE SCREEN BUFFER
E067                  2
E067  8E0400                                  ldx             #VIDEO_START    ; start beginning of video buffer
E06A                  4
E06A  8C17FF                                  cmpx    #VIDEO_END              ; until the end of the video buffer
E06D  2C06                                    bge             3f                              ; restart when past the end
E06F  6C80                                    inc             ,x+                             ; increment character
E071  6C80                                    inc             ,x+                             ; increment the attribute
E073  20F5                                    bra             4b                              ; loop until done
E075                  3
                                              ; TOGGLE THE BACKBUFFER
E075  B61800                                  lda             GFX_FLAGS       ; load current backbuffer
E078  8820                                    eora    #$20            ; toggle it
E07A  B71800                                  sta             GFX_FLAGS       ; save the backbuffer
                      
                                              ; COLOR CYCLE THE MOUSE CURSOR
E07D  8604                                    lda             #4
E07F  B71816                                  sta             CSR_PAL_INDX
E082  B61817                                  lda             CSR_PAL_DATA
E085  8B04                                    adda    #$04
E087  B71817                                  sta             CSR_PAL_DATA            
                      
                                              ; INCREMENT THE CYCLE COUNTER
E08A  7C0014                                  inc             var_cycle       ; increment the cycle counter
E08D  B60014                                  lda             var_cycle
E090  8140                                    cmpa    #num_cycles             ; max cycles yet?
E092  2323                                    bls             continue        ; nope, continue with the main loop
E094  7F0014                                  clr             var_cycle       ; reset the cycle count
                      
                                              ; MODE CHANGES
E097                  6
E097  F60015                                  ldb             var_mode_index
E09A  7C0015                                  inc             var_mode_index
E09D  8EE0B9                                  ldx             #mode_data
E0A0  A685                                    lda             b,x
E0A2  81FF                                    cmpa    #$ff
E0A4  270C                                    beq             5f
E0A6  B61800                                  lda             GFX_FLAGS
E0A9  84F0                                    anda    #$f0
E0AB  AA85                                    ora             b,x
E0AD  B71800                                  sta             GFX_FLAGS
E0B0  2005                                    bra             continue
E0B2                  5       
E0B2  7F0015                                  clr             var_mode_index
E0B5  20E0                                    bra             6b
E0B7                  continue
                      
                              
                      
E0B7  20AE                                    bra             2b
                      
                      ; ***********************************************************
                      
                      
E0B9  0001020304050607 mode_data       fcb             $00, $01, $02, $03, $04, $05, $06, $07
E0C1  08090A0B0C0D0E0F                         fcb             $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
                      
E0C9  FF                                      fcb             $ff
                      
                      ; interrupt vectors
FFF0                                                  org  $fff0
FFF0  E01D            HARD_RSRVD      fdb  do_RSRV    ; Motorola RESERVED Hardware Interrupt Vector
FFF2  E01A            HARD_SWI3       fdb  do_SWI3    ; SWI3 Hardware Interrupt Vector
FFF4  E017            HARD_SWI2       fdb  do_SWI2    ; SWI2 Hardware Interrupt Vector
FFF6  E014            HARD_FIRQ       fdb  do_FIRQ    ; FIRQ Hardware Interrupt Vector
FFF8  E011            HARD_IRQ        fdb  do_IRQ     ; IRQ Hardware Interrupt Vector
FFFA  E00E            HARD_SWI        fdb  do_SWI     ; SWI/SYS Hardware Interrupt Vector
FFFC  E00B            HARD_NMI        fdb  do_NMI     ; NMI Hardware Interrupt Vector
FFFE  E000            HARD_RESET      fdb  ROM_ENTRY  ; RESET Hardware Interrupt Vector
                      
0000                                          END
