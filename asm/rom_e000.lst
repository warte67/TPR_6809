                      ; ****************
                      ; * ROM_E000.asm *
                      ; ****************
                              
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                              
                      
                                              
                      
                      ; **************
                      ; * MEMORY MAP *
                      ; **************
0000                                                  org     $0000
                                                      
0000  E020            SOFT_RESET      fdb     do_RESET        ; Software RESET Vector
0002  E00B            SOFT_NMI        fdb     do_NMI          ; Software NMI Vector
0004  E00E            SOFT_SWI        fdb     do_SWI          ; Software SWI Vector
0006  E011            SOFT_IRQ        fdb     do_IRQ          ; Software IRQ Vector
0008  E014            SOFT_FIRQ       fdb     do_FIRQ         ; Software FIRQ Vector
000A  E017            SOFT_SWI2       fdb     do_SWI2         ; Software SWI2 Vector
000C  E01A            SOFT_SWI3       fdb     do_SWI3         ; Software SWI3 Vector
000E  E01D            SOFT_RSRVD      fdb     do_RSRV         ; Software Motorola Reserved Vector
                      
                      ; reserved system variables
0010  E07A            EXEC_VECTOR             fdb             reset                   ; execution vector 
                      
0012  00              TCSR_ROW                fcb             0                               ; current cursor row
0013  00              TCSR_COL                fcb             0                               ; current cursor column
0014  10              TCSR_ATTRIB             fcb             $10                             ; current cursor attribute
0015  A2              TEXT_ATTRIB             fcv             $a2                             ; current text attribute
                      
                      
0016                                          INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_FLAGS       equ     $1800   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1801                  GFX_AUX equ     $1801   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1802                  GFX_TIMING_W    equ     $1802   ; (Word) horizontal timing
1804                  GFX_TIMING_H    equ     $1804   ; (Word) vertical timing
1806                  GFX_PAL_INDX    equ     $1806   ; (Byte) gfx palette index (0-15)
1807                  GFX_PAL_DATA    equ     $1807   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
1809                  GFX_FG_BEGIN    equ     $1809   ; start of paged foreground gfxmode registers
1809                  GFX_FG_WDTH     equ     $1809   ; (Byte) Foreground Unit Width-1
180A                  GFX_FG_HGHT     equ     $180a   ; (Byte) Foreground Unit Height-1
180A                  GFX_FG_END      equ     $180a   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
180B                  GFX_BG_BEGIN    equ     $180b   ; start of paged background gfxmode registers
180B                  GFX_EXT_ADDR    equ     $180b   ; (Word) 20K extended graphics addresses
180D                  GFX_EXT_DATA    equ     $180d   ; (Byte) 20K extended graphics RAM data
180D                  GFX_BG_END      equ     $180d   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
180E                  CSR_BEGIN       equ     $180e   ; start of mouse cursor hardware registers
180E                  CSR_XPOS        equ     $180e   ; (Word) horizontal mouse cursor coordinate
1810                  CSR_YPOS        equ     $1810   ; (Word) vertical mouse cursor coordinate
1812                  CSR_XOFS        equ     $1812   ; (Byte) horizontal mouse cursor offset
1813                  CSR_YOFS        equ     $1813   ; (Byte) vertical mouse cursor offset
1814                  CSR_SIZE        equ     $1814   ; (Byte) cursor size (0-15) 0:off
1815                  CSR_SCROLL      equ     $1815   ; (Signed) MouseWheel Scroll: -1, 0, 1
1816                  CSR_FLAGS       equ     $1816   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1817                  CSR_PAL_INDX    equ     $1817   ; (Byte) mouse cursor color palette index (0-15)
1818                  CSR_PAL_DATA    equ     $1818   ; (Word) mouse cursor color palette data RGBA4444
181A                  CSR_BMP_INDX    equ     $181a   ; (Byte) mouse cursor bitmap pixel offset
181B                  CSR_BMP_DATA    equ     $181b   ; (Byte) mouse cursor bitmap pixel index color
181B                  CSR_END equ     $181b   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
181C                  DBG_BEGIN       equ     $181c   ; Start of Debugger Hardware Registers
181C                  DBG_BRK_ADDR    equ     $181c   ; (Word) Address of current breakpoint
181E                  DBG_FLAGS       equ     $181e   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
181E                  DBG_END equ     $181e   ; End of the Debugger Hardware Registers
                      
                      
181F                  GFX_END equ     $181f   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
181F                  FIO_BEGIN       equ     $181f   ; start of file i/o hardware registers
181F                  FIO_ERR_FLAGS   equ     $181f   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 0-4: not yet assigned
1820                  FIO_COMMAND     equ     $1820   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
1821                  FIO_HANDLE      equ     $1821   ; (Byte) file handle or ZERO
1822                  FIO_BFROFS      equ     $1822   ; (Word) start of I/O buffer
1823                  FIO_BFRLEN      equ     $1823   ; (Word) length of I/O buffer
1825                  FIO_SEEKOFS     equ     $1825   ; (Word) seek offset
1827                  FIO_FILEPATH    equ     $1827   ; (Char Array 256) file path and argument buffer
1927                  FIO_END equ     $1927   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1928                  KEY_BEGIN       equ     $1928   ; start of keyboard hardware registers
1928                  CHAR_Q_LEN      equ     $1928   ; (char) # of characters waitingin queue        (Read Only)
1929                  CHAR_SCAN       equ     $1929   ; read next character in queue       (not popped when read)
192A                  CHAR_POP        equ     $192a   ; (char) next character waiting in queue (popped when read)
192B                  XKEY_BUFFER     equ     $192b   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
193B                  KEY_END equ     $193b   ; end of keyboard hardware registers
                      
                      ;  Reserved Hardware:
193C                  RESERVED_HDW    equ     $193c   ; Reserved 1727 bytes ($193C - $1FFB)
                      
                      ;  Memory Bank Selects (16MB):
1FFC                  RAMBANK_SEL_1   equ     $1ffc   ; (Word)Indexes 65536 x 8kb banks
1FFE                  RAMBANK_SEL_2   equ     $1ffe   ; (Word)Indexes 65536 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      
                      ; ***************************************
                      ; * Read Only Sytem KERNAL ROM          *
                      ; ***************************************
                                            
                       
0016                  SECTION.CODE
E000                                          org     $E000  
                                  ;* Power On Initialization            
E000                  ROM_ENTRY   
E000  CE0200                                  LDU             #U_STK_TOP              ; top of user stack     
E003  10CE0400                                LDS     #S_STK_TOP              ; top of stack space            
E007  6E9F0000                    JMP     [SOFT_RESET]      
                      
                                  
                                  ;* NMI Vector Handler                     
E00B  7EE023          do_NMI      JMP just_rti
                                  
                                  ;* SWI Vector Handler (do_SWI)   
E00E  7EE023          do_SWI          JMP just_rti
                      
                                  ;* IRQ Vector Handler         
E011  7EE023          do_IRQ      JMP just_rti
                      
                                  ;* FIRQ Vector Handler         
E014  7EE023          do_FIRQ     JMP just_rti
                      
                                  ;* SWI2 Vector Handler         
E017  7EE023          do_SWI2     JMP just_rti
                      
                                  ;* SWI3 Vector Handler         
E01A  7EE023          do_SWI3     JMP just_rti
                      
                                  ;* Reserved Vector Handler
E01D  7EE07A          do_RSRV     JMP reset
                      
                                  ;* Reset Vector Handler         
E020  7EE07A          do_RESET    JMP reset
                                  
                      ;********************
                      ;* RESET
                      ;**************************                     
                                              
                      ; NOTES:  
                      ;
                      ;                       SYNC still needs to be implemented along with NMI, IRQ, and FIRQ handlers
                      
E023                  just_rti        
E023  3B                                      rti 
                      
E024  2E2F61736D2F746573742E68657800 test_file       fcn             "./asm/test.hex"
                      
E033  54776F2D504920526574726F20363830390A prompt_msg      fcc             "Two-PI Retro 6809\n"
E045  42494F53204B45524E454C20762E302E30320A                         fcc             "BIOS KERNEL v.0.02\n"
E058  436F707972696768742032303233206279204A6179204661726965730A0A                         fcc             "Copyright 2023 by Jay Faries\n\n"
E076  4F4B0A00        prompt_ready fcn        "OK\n"
                      
E07A                  reset           
                                      ; simply run the test code              
                                              ;jsr            test_load_hex
                      
                      
                                      ; load the default graphics mode
E07A  8602                                    lda             #$02
E07C  B71800                                  sta             GFX_FLAGS
                      
                                      ; set the text attribute default
E07F  86A2                                    lda             #$a2
E081  B70015                                  sta             TEXT_ATTRIB     
                      
                                      ; clear screen
E084  BDE0E6                                  jsr             clear_text_screen
                      
                      
                                      ; preset the starting text cursor position
E087  7F0012                                  clr             TCSR_ROW
E08A  7F0013                                  clr             TCSR_COL
                      
                                      ; display the text prompt
E08D  8EE033                                  ldx             #prompt_msg
E090  BDE182                                  jsr             text_out
                      
                      
                                      ; main KERNEL loop
E093  C610                                    ldb             #$10
E095  F70014                                  stb             TCSR_ATTRIB
                      
E098                  main_kernel
                                              ; rotate the cursor attributes
E098  7C0014                                  inc             TCSR_ATTRIB
E09B  BDE161                                  jsr             _tcsr_pos               ; fetch x from row/col
E09E  8620                                    lda             #' '                    ; space character
E0A0  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E0A3  ED84                                    std             0,x                             ; place the cursor onto the screen
                      
                      
E0A5  B61928                                  lda             CHAR_Q_LEN
E0A8  27EE                                    beq             main_kernel              
                                              ; delete the old cursor
E0AA  BDE161                                  jsr             _tcsr_pos
E0AD  8620                                    lda             #' '
E0AF  F60015                                  ldb             TEXT_ATTRIB
E0B2  ED84                                    std             0,x
                                              
                                              ; display typed character
E0B4  B6192A                                  lda             CHAR_POP                ; pop the last typed character                  
E0B7  BDE0FA                                  jsr             char_out                ; display it
                      
                                              ; display the new cursor
E0BA  BDE161                                  jsr             _tcsr_pos               ; fetch x from row/col
E0BD  8620                                    lda             #' '                    ; space character
E0BF  F60014                                  ldb             TCSR_ATTRIB             ; load the current attribute
E0C2  ED84                                    std             0,x                             ; place the cursor onto the screen
                                              
                      
E0C4  20D2                                    bra             main_kernel
                      
                      
E0C6  20FE            done            bra             done
                      
                      ; **** SUBROUTINES ***************************************************
                      
                      
                      ; FILE SYSTEM TESTS:
                      
E0C8                  test_load_hex
                                              ; load "test.hex"
E0C8  8EE024                                  ldx             #test_file              ; fetch the filename
E0CB  108E1827                                ldy             #FIO_FILEPATH   ; fetch the filename hardware register storage
E0CF                  1
E0CF  A680                                    lda             ,x+                             ; copy a character from the source filename
E0D1  A7A0                                    sta             ,y+                             ; store it in the hardware register
E0D3  26FA                                    bne             1b                              ; keep looping until null-termination
                      
E0D5  8607                                    lda             #$07                    ; command: LoadHex
E0D7  B71820                                  sta             FIO_COMMAND             ; executre the command
E0DA  B6181F                                  lda             FIO_ERR_FLAGS   ; load the errors flag
E0DD  8180                                    cmpa    #$80                    ; test for bit: file not found?
E0DF  2704                                    beq             1f                              ; dont call the sub if it wasnt loaded
E0E1  AD9F0010                                jsr             [$0010]                 ; call the loaded subroutine
E0E5                  1
E0E5  39                                      rts
                      
                      
                      ; **** SYSTEM CALLS ******************************
                      
E0E6                  clear_text_screen       ; clear the text screen
E0E6  3416                                    pshs    D,X
E0E8  8E0400                                  ldx             #VIDEO_START
E0EB  8620                                    lda             #' '
E0ED  F60015                                  ldb             TEXT_ATTRIB
E0F0  ED81            1                       std             ,x++
E0F2  8C17FF                                  cmpx    #VIDEO_END
E0F5  23F9                                    bls             1b      
E0F7  3516                                    puls    D,X
E0F9  39                                      rts
                      
                      
E0FA                  char_out        ; Display character in the A register to the screen
                                              ; at the current cursor position and in the 
                                              ; current color.
                      
E0FA  3436                                    pshs    D, X, Y
E0FC  F60015                                  ldb             TEXT_ATTRIB
E0FF  8D60                                    bsr             _tcsr_pos               ; find X from Row and Col
                      
E101  810A                                    cmpa    #$0a
E103  2719                                    beq             _cr
E105  810D                                    cmpa    #$0D
E107  2715                                    beq             _cr
E109  8108                                    cmpa    #$08                    ; backspace
E10B  2721                                    beq             _backspace
E10D  8120                                    cmpa    #$20
E10F  2D4D                                    blt             3f
                                              ; standard printable character
E111  ED84                                    std             ,x
E113  7C0013                                  inc             TCSR_COL
E116  B60013                                  lda             TCSR_COL
E119  B11809                                  cmpa    GFX_FG_WDTH
E11C  2340                                    bls             3f
E11E                  _cr
E11E  7F0013                                  clr             TCSR_COL
E121  B60012                                  lda             TCSR_ROW
E124  B1180A                                  cmpa    GFX_FG_HGHT
E127  2C0F                                    bge             _scroll
E129  7C0012                                  inc             TCSR_ROW
E12C  2030                                    bra             3f
E12E                  _backspace
E12E  B60013                                  lda             TCSR_COL
E131  272B                                    beq             3f
E133  7A0013                                  dec             TCSR_COL
E136  2026                                    bra             3f
                      
E138                  _scroll                 
E138  B61809                                  lda             GFX_FG_WDTH
E13B  4C                                      inca
E13C  C602                                    ldb             #2
E13E  3D                                      mul
E13F  8E0400                                  ldx             #VIDEO_START
E142  308B                                    leax    d,X
E144  108E0400                                ldy             #VIDEO_START
E148  EC81            1                       ldd             ,x++
E14A  EDA1                                    std             ,y++
E14C  8C17FF                                  cmpx    #VIDEO_END
E14F  2DF7                                    blt             1b
E151  8620                                    lda             #' '
E153  F60015                                  ldb             TEXT_ATTRIB
E156  EDA1            2                       std             ,y++
E158  108C17FF                                cmpy    #VIDEO_END
E15C  2DF8                                    blt             2b
                      
E15E  3536            3                       puls    D, X, Y
E160  39                                      rts
                      
E161                  _tcsr_pos       ; load into X according to TCSR_ROW & TCSR_COL
E161  3406                                    pshs    D
E163  8E0400                                  ldx             #VIDEO_START
E166  B60012                                  lda             TCSR_ROW
E169  48                                      lsla
E16A  F61809                                  ldb             GFX_FG_WDTH
E16D  5C                                      incb
E16E  3D                                      mul
E16F  308B                                    leax    D,X
E171  B60013                                  lda             TCSR_COL
E174  48                                      lsla
E175  3086                                    leax    a,x
E177  8C17FF                                  cmpx    #VIDEO_END
E17A  2303                                    bls             1f
E17C  8E17FE                                  ldx             #VIDEO_END-1
E17F                  1
E17F  3506                                    puls    D
E181  39                                      rts
                      
E182                  text_out        ; output the string pointed to by X using the current attribute
E182  3416                                    pshs    D,X
E184  A680            1                       lda             ,X+             
E186  2705                                    beq             2f                              
E188  BDE0FA                                  jsr             char_out
E18B  20F7                                    bra             1b
E18D  3516            2                       puls    D,X
E18F  39                                      rts
                      
                                      
                      
                      
                      
                      
                      
                      
                      
                      ; ***********************************************************
                      
                      
                      ; interrupt vectors
FFF0                                                  org  $fff0
FFF0  E01D            HARD_RSRVD      fdb  do_RSRV    ; Motorola RESERVED Hardware Interrupt Vector
FFF2  E01A            HARD_SWI3       fdb  do_SWI3    ; SWI3 Hardware Interrupt Vector
FFF4  E017            HARD_SWI2       fdb  do_SWI2    ; SWI2 Hardware Interrupt Vector
FFF6  E014            HARD_FIRQ       fdb  do_FIRQ    ; FIRQ Hardware Interrupt Vector
FFF8  E011            HARD_IRQ        fdb  do_IRQ     ; IRQ Hardware Interrupt Vector
FFFA  E00E            HARD_SWI        fdb  do_SWI     ; SWI/SYS Hardware Interrupt Vector
FFFC  E00B            HARD_NMI        fdb  do_NMI     ; NMI Hardware Interrupt Vector
FFFE  E000            HARD_RESET      fdb  ROM_ENTRY  ; RESET Hardware Interrupt Vector
                      
0000                                          END
