                      ; BUILD:        asm6809 -H -9 test.asm -o test.hex              
                      
0000                                  INCLUDE "rom_e000_h.asm"
                      ; ******************
                      ; * ROM_E000_H.asm *
                      ; ******************
                      
                      
                      ; system call macro to support the Warte variant 
                      ;               of the MC6809e, the 6809w. This replaces
                      ;               the SWI3 instruction with the SYS #n OS9 
                      ;               style system call instruction.
                      SYS             macro
                                      SWI3
                                      fcb             \1              
                                      endm
                                                              
                      ; reserved system variables
                      
                      ;               org     $0100   ; for now, just place reserved kernal variables at $0100
                      ;                               ; after the rom kernel vectors are clearly established
                      ;                               ; move this origin to just after them.
                      ;
                      ;TCSR_ROW       fcb     0       ; current text cursor row
                      ;TCSR_COL       fcb     0       ; current text cursor column
                      ;TCSR_ATTRIB    fcb     $10     ; current cursor attribute
                      ;TEXT_ATTRIB    fcb     $a2     ; current text attribute
                      ;TCSR_ANC_ROW   fcb     0       ; beginning row of line currently being edited
                      ;TCSR_ANC_COL   fcb     0       ; beginning column of line currently being edited
                      ;TCSR_ANC_ADR   fdb     0       ; anchor address
                      ;TCSR_EDT_ADR   fdb     0       ; address when enter was pressed during line edit
                      ;DEF_GFX_FLAGS  fcb     $02     ; default graphics flags        ($02)
                      ;;TCSR_DECAY    fdb     $0000   ; counter delay for the cursor
                      ;TCSR_DECAY     fcb     $00     ; counter delay for the cursor
                      
0100                  user_vars_page  equ     $0100   ; user variables page = $0100 - $01ff
0000                                  INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  SOFTWARE Interrupt Vectors:
0000                  SOFT_RESET      equ     $0000   ; Software RESET Vector
0002                  SOFT_NMI        equ     $0002   ; Software NMI Vector
0004                  SOFT_SWI        equ     $0004   ; Software SWI Vector
0006                  SOFT_IRQ        equ     $0006   ; Software IRQ Vector
0008                  SOFT_FIRQ       equ     $0008   ; Software FIRQ Vector
000A                  SOFT_SWI2       equ     $000a   ; Software SWI2 Vector
000C                  SOFT_SWI3       equ     $000c   ; Software SWI3 Vector
000E                  SOFT_RSRVD      equ     $000e   ; Software Motorola Reserved Vector
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
0010                  KVEC_EXEC       equ     $0010   ; KERNEL Vector:  Exec
0012                  KVEC_CLS        equ     $0012   ; KERNEL Vector:  Clear Text Screen
0014                  KVEC_CHAROUT    equ     $0014   ; KERNEL Vector:  Character Out
0016                  KVEC_SHUTDOWN   equ     $0016   ; KERNEL Vector:  System Shutdown
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_CLK_DIV     equ     $1800   ; (Byte) 60 hz Clock Divider:
                                                      ;      bit 7: 0.46875 hz
                                                      ;      bit 6: 0.9375 hz
                                                      ;      bit 5: 1.875 hz
                                                      ;      bit 4: 3.75 hz
                                                      ;      bit 3: 7.5 hz
                                                      ;      bit 2: 15.0 hz
                                                      ;      bit 1: 30.0 hz
                                                      ;      bit 0: 60.0 hz
1801                  GFX_FLAGS       equ     $1801   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1802                  GFX_AUX equ     $1802   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1803                  GFX_TIMING_W    equ     $1803   ; (Word) horizontal timing
1805                  GFX_TIMING_H    equ     $1805   ; (Word) vertical timing
1807                  GFX_PAL_INDX    equ     $1807   ; (Byte) gfx palette index (0-255)
1808                  GFX_PAL_DATA    equ     $1808   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
180A                  GFX_FG_BEGIN    equ     $180a   ; start of paged foreground gfxmode registers
180A                  GFX_FG_WDTH     equ     $180a   ; (Byte) Foreground Unit Width-1
180B                  GFX_FG_HGHT     equ     $180b   ; (Byte) Foreground Unit Height-1
180C                  GFX_FONT_IDX    equ     $180c   ; (Byte) Font Glyph Index
180D                  GFX_FONT_DAT    equ     $180d   ; (8-Bytes) Font Glyph Data Buffer
1814                  GFX_FG_END      equ     $1814   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
1815                  GFX_BG_BEGIN    equ     $1815   ; start of paged background gfxmode registers
1815                  GFX_EXT_ADDR    equ     $1815   ; (Word) 20K extended graphics addresses
1817                  GFX_EXT_DATA    equ     $1817   ; (Byte) 20K extended graphics RAM data
1818                  GFX_BG_ARG1     equ     $1818   ; (Byte) first read/write argument for the blit commands
1819                  GFX_BG_CMD      equ     $1819   ; (Byte) Blit Commands on the indexed bitmap buffer
                                                      ;      0x01: Clear Screen     (with color index in GFX_BG_ARG1)
                                                      ;      0x02: unassigned
                                                      ;      0x03: unassigned
                                                      ;      0x04: Scroll Left      (by pixels x GFX_BG_ARG1)
                                                      ;      0x05: Scroll Right     (by pixels x GFX_BG_ARG1)
                                                      ;      0x06: Scroll Up        (by pixels x GFX_BG_ARG1)
                                                      ;      0x07: Scroll Down      (by pixels x GFX_BG_ARG1)
                                                      ;      0x08: Copy Buffer      (From Active to Inactive)
1819                  GFX_BG_END      equ     $1819   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
181A                  CSR_BEGIN       equ     $181a   ; start of mouse cursor hardware registers
181A                  CSR_XPOS        equ     $181a   ; (Word) horizontal mouse cursor coordinate
181C                  CSR_YPOS        equ     $181c   ; (Word) vertical mouse cursor coordinate
181E                  CSR_XOFS        equ     $181e   ; (Byte) horizontal mouse cursor offset
181F                  CSR_YOFS        equ     $181f   ; (Byte) vertical mouse cursor offset
1820                  CSR_SIZE        equ     $1820   ; (Byte) cursor size (0-15) 0:off
1821                  CSR_SCROLL      equ     $1821   ; (Signed) MouseWheel Scroll: -1, 0, 1
1822                  CSR_FLAGS       equ     $1822   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1823                  CSR_PAL_INDX    equ     $1823   ; (Byte) mouse cursor color palette index (0-15)
1824                  CSR_PAL_DATA    equ     $1824   ; (Word) mouse cursor color palette data RGBA4444
1826                  CSR_BMP_INDX    equ     $1826   ; (Byte) mouse cursor bitmap pixel offset
1827                  CSR_BMP_DATA    equ     $1827   ; (Byte) mouse cursor bitmap pixel index color
1827                  CSR_END equ     $1827   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
1828                  DBG_BEGIN       equ     $1828   ; Start of Debugger Hardware Registers
1828                  DBG_BRK_ADDR    equ     $1828   ; (Word) Address of current breakpoint
182A                  DBG_FLAGS       equ     $182a   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
182A                  DBG_END equ     $182a   ; End of the Debugger Hardware Registers
                      
                      ;  Sprite Hardware Registers:
182B                  SPR_BEGIN       equ     $182b   ; Start of Sprite Hardware Registers
                      
                      ;  Sprite Flag Registers:
182B                  SPR_DIS_ENA     equ     $182b   ; (4-Bytes) sprite Enable Bits. 1 bit per sprite
182F                  SPR_COL_ENA     equ     $182f   ; (4-Bytes) sprite collision enable. 1 bit per sprite
1833                  SPR_COL_TYP     equ     $1833   ; (4-Bytes) sprite collision type (0:hitbox, 1:pixel perfect)
                      
                      ;  Sprite Palette Registers:
1837                  SPR_PAL_IDX     equ     $1837   ; (Byte) color palette index
1838                  SPR_PAL_DAT     equ     $1838   ; (Word) indexed sprite palette entry color bits RGBA4444
                      
                      ;  Sprite Indexed Registers:
183A                  SPR_COL_DET     equ     $183a   ; (4-Bytes) Collision detection bits. One bit per colliding sprite.
183E                  SPR_H_POS       equ     $183e   ; (Sint16) signed 16-bit integer
1840                  SPR_V_POS       equ     $1840   ; (Sint16) signed 16-bit integer
1842                  SPR_X_OFS       equ     $1842   ; (Sint8) signed 8-bit integer horizontal display offset
1843                  SPR_Y_OFS       equ     $1843   ; (Sint8) signed 8-bit integer vertical display offset
1844                  SPR_PRIO        equ     $1844   ; (Byte) Sprite Display Priority:
                                                      ;      0) displays directly behind all foreground modes
                                                      ;      1) displays infront of Glyph32 layer 0 but all other foreground modes
                                                      ;      2) displays infront of Glyph32 layer 1 but all other foreground modes
                                                      ;      3) displays infront of Glyph32 layer 2 but all other foreground modes
                                                      ;      4) displays infront of Glyph32 layer 3 but all other foreground modes
                                                      ;      5) displays infront of Debug layer, but behind the mouse cursor
                                                      ;      6) displays infront of Mouse Cursor layer (in index order)
                                                      ;      7) displays in sprite order
                      
                      ;  Sprite Indexed Bitmap Pixel Data:
1845                  SPR_BMP_IDX     equ     $1845   ; (Byte) Sprite pixel offset (Y*16+X)
1846                  SPR_BMP_DAT     equ     $1846   ; (Byte) Sprite color palette index data
                      
                      ;  End of Sprite Hardware Registers
1846                  SPR_END equ     $1846   ; End of the Sprite Hardware Registers
                      
                      ;  End ofthe GFX Hardware Registers
1847                  GFX_END equ     $1847   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
1847                  FIO_BEGIN       equ     $1847   ; start of file i/o hardware registers
1847                  FIO_ERR_FLAGS   equ     $1847   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 4: wrong file type
                                                      ;      bit 3: directory not found
                                                      ;      bit 2: too many file handles
                                                      ;      bit 1: incorrect file handle
                                                      ;      bit 0: not yet assigned
1848                  FIO_COMMAND     equ     $1848   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
                                                      ;      $17 = SYSTEM: Shutdown
                                                      ;      $18 = SYSTEM: Load Compilation Date
1849                  FIO_HANDLE      equ     $1849   ; (Byte) file handle or ZERO
184A                  FIO_BFROFS      equ     $184a   ; (Word) start of I/O buffer
184B                  FIO_BFRLEN      equ     $184b   ; (Word) length of I/O buffer
184D                  FIO_IODATA      equ     $184d   ; (Byte) input / output character
184E                  FIO_RET_COUNT   equ     $184e   ; (Byte) number of return entries
184F                  FIO_RET_INDEX   equ     $184f   ; (Byte) command return index
1850                  FIO_RET_BUFFER  equ     $1850   ; (Char Array 256) paged return buffer
1950                  FIO_FILEPATH    equ     $1950   ; (Char Array 256) file path and argument buffer
1A50                  FIO_END equ     $1a50   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1A51                  KEY_BEGIN       equ     $1a51   ; start of keyboard hardware registers
1A51                  CHAR_Q_LEN      equ     $1a51   ; (char) # of characters waiting in queue       (Read Only)
1A52                  CHAR_SCAN       equ     $1a52   ; read next character in queue       (not popped when read)
1A53                  CHAR_POP        equ     $1a53   ; (char) next character waiting in queue (popped when read)
1A54                  XKEY_BUFFER     equ     $1a54   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
1A64                  EDT_BFR_CSR     equ     $1a64   ; (Byte) cursor position within edit buffer    (Read/Write)
1A65                  EDT_BUFFER      equ     $1a65   ; (256 Bytes) line editing character buffer    (Read/Write)
1B65                  KEY_END equ     $1b65   ; end of keyboard hardware registers
                      
                      ;  Gamepad Hardware Registers:
1B66                  JOYS_BEGIN      equ     $1b66   ; start of gamepad hardware registers
1B66                  JOYS_1_BTN      equ     $1b66   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B68                  JOYS_1_DBND     equ     $1b68   ; (Byte) PAD 1 analog deadband; default is 5   (read/write)
1B69                  JOYS_1_LTX      equ     $1b69   ; (char) PAD 1 LThumb-X position (-128 _ +127)   (realtime)
1B6A                  JOYS_1_LTY      equ     $1b6a   ; (char) PAD 1 LThumb-Y position (-128 _ +127)   (realtime)
1B6B                  JOYS_1_RTX      equ     $1b6b   ; (char) PAD 1 RThumb-X position (-128 _ +127)   (realtime)
1B6C                  JOYS_1_RTY      equ     $1b6c   ; (char) PAD 1 RThumb-Y position (-128 _ +127)   (realtime)
1B6D                  JOYS_1_Z1       equ     $1b6d   ; (char) PAD 1 left trigger        (0 - 127)     (realtime)
1B6E                  JOYS_1_Z2       equ     $1b6e   ; (char) PAD 1 right trigger       (0 - 127)     (realtime)
                      
1B6F                  JOYS_2_BTN      equ     $1b6f   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B71                  JOYS_2_DBND     equ     $1b71   ; (Byte) PAD 2 analog deadband; default is 5   (read/write)
1B72                  JOYS_2_LTX      equ     $1b72   ; (char) PAD 2 LThumb-X position (-128 _ +127)   (realtime)
1B73                  JOYS_2_LTY      equ     $1b73   ; (char) PAD 2 LThumb-Y position (-128 _ +127)   (realtime)
1B74                  JOYS_2_RTX      equ     $1b74   ; (char) PAD 2 RThumb-X position (-128 _ +127)   (realtime)
1B75                  JOYS_2_RTY      equ     $1b75   ; (char) PAD 2 RThumb-Y position (-128 _ +127)   (realtime)
1B76                  JOYS_2_Z1       equ     $1b76   ; (char) PAD 2 left trigger        (0 - 127)     (realtime)
1B77                  JOYS_2_Z2       equ     $1b77   ; (char) PAD 2 right trigger       (0 - 127)     (realtime)
1B78                  JOYS_END        equ     $1b78   ; end of gamepad hardware registers
                      
                      ;  Reserved Hardware:
1B79                  RESERVED_HDW    equ     $1b79   ; Reserved 1154 bytes ($1B79 - $1FFB)
                      
                      ;  Memory Bank Selects (external 2MB QSPI ISSI 16Mbit SerialRAM):
                      ;  https://www.mouser.com/ProductDetail/ISSI/IS66WVS2M8BLL-104NLI?qs=doiCPypUmgFx786bHGqGiQ%3D%3D
1FFE                  RAMBANK_SEL_1   equ     $1ffe   ; (Byte)Indexes 256 x 8kb banks
1FFF                  RAMBANK_SEL_2   equ     $1fff   ; (Byte)Indexes 256 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      ;  Hardware Interrupt Vectors:
FFF0                  HARD_RSRVD      equ     $fff0   ; Motorola RESERVED Hardware Interrupt Vector
FFF2                  HARD_SWI3       equ     $fff2   ; SWI3 Hardware Interrupt Vector
FFF4                  HARD_SWI2       equ     $fff4   ; SWI2 Hardware Interrupt Vector
FFF6                  HARD_FIRQ       equ     $fff6   ; FIRQ Hardware Interrupt Vector
FFF8                  HARD_IRQ        equ     $fff8   ; IRQ Hardware Interrupt Vector
FFFA                  HARD_SWI        equ     $fffa   ; SWI / SYS Hardware Interrupt Vector
FFFC                  HARD_NMI        equ     $fffc   ; NMI Hardware Interrupt Vector
FFFE                  HARD_RESET      equ     $fffe   ; RESET Hardware Interrupt Vector
                      
                      
                              ; entry exec vector is at $0010                         
0010                                  org     $0010
0010  2008                            fdb     start           ; [EXEC_VECTOR] 
                      
2000                                  org     $2000
2000  00              var_ch          fcb     $00
2001  00              var_at          fcb     $00
2002  00              var_count       fcb     $00
2003  FF              var_csr         fcb     $ff
0020                  num_cycles      equ     $20
2004  00              var_cycle       fcb     $00
2005  00              var_mode_index  fcb     $00
2006  0000            var_mouse_color fdb     $0000
                      
2008                  start
                              ; TESTING: fill the first 256 bytes of screen ram 
                              ;               with ascending values to display
                                              
2008  8620                            lda     #num_cycles     ; initially clear the cycle variable
200A  B72004                          sta     var_cycle
                              ; SAVE THE MOUSE CURSOR COLOR
200D  8604                            lda     #4
200F  B71823                          sta     CSR_PAL_INDX
2012  FC1824                          ldd     CSR_PAL_DATA
2015  FD2006                          std     var_mouse_color
                      ;       ; enable backbuffer mode
                      ;               lda     GFX_FLAGS
                      ;               ora     #$40
                      ;               sta     GFX_FLAGS
                              ; set up the initial graphics mode 
2018  7F2005                          clr     var_mode_index  ; start with index 0
201B  8E20FA                          ldx     #mode_data
201E  B61801                          lda     GFX_FLAGS
2021  84F0                            anda    #$f0
2023  AA84                            ora     ,x
2025  B71801                          sta     GFX_FLAGS
                              ; fill the background buffer with incrementing values
2028  8E0000                          ldx     #0
202B  BF1815          1               stx     GFX_EXT_ADDR
202E  B71817                          sta     GFX_EXT_DATA
2031  4C                              inca
2032  81FF                            cmpa    #$ff
2034  2601                            bne     2f
2036  4F                              clra
2037  3001            2               leax    1,x
                                      ;cmpx   #$2800
2039  8C17FF                          cmpx    #VIDEO_END      ;$0800
203C  26ED                            bne     1b
                      
                      
                      
                      ; ***********************
                      ; *  Pre-Fill and Cycle 
                      ; *  the Display Buffer
                      ; ***********************
                      
203E  7F2000                          clr     var_ch          ; character = 0
2041  7F2001                          clr     var_at          ; attribute = 0
2044  7F2002                          clr     var_count       ; count = 0
2047  8E0400                          ldx     #VIDEO_START    ; start of display buffer
204A  8C17FF          1               cmpx    #VIDEO_END      ; at the end of the buffer?
204D  2C1D                            bge     2f                              ; yes, skip to the screen updates
204F  B62000                          lda     var_ch                  ; load the current character
2052  F62001                          ldb     var_at                  ; load the current attribute
2055  ED81                            std     ,x++                    ; store both character and attribute
2057  7C2000                          inc     var_ch                  ; next character
205A  7C2002                          inc     var_count               ; increment count
205D  B62002                          lda     var_count               ; load the count
2060  8111                            cmpa    #17                             ; compare the count with this amount
2062  2DE6                            blt     1b                              ; loop if count lower than
2064  7C2001                          inc     var_at                  ; next attribute
2067  7F2002                          clr     var_count               ; clear the count
206A  20DE                            bra     1b                              ; resume the loop
                                      ; INCREMENT THE SCREEN BUFFER
206C  8E0400          2               ldx     #VIDEO_START    ; start beginning of video buffer
206F  8C17FF          4               cmpx    #VIDEO_END              ; until the end of the video buffer
2072  2C06                            bge     3f                              ; restart when past the end
2074  6C80                            inc     ,x+                             ; increment character
2076  6C80                            inc     ,x+                             ; increment the attribute
2078  20F5                            bra     4b                              ; loop until done
207A                  3               ; SCROLL THE EXTENDED SCREEN BUFFER
207A  8602                            lda     #2                              ; delta value = scroll by this many pixels
207C  B71818                          sta     GFX_BG_ARG1             ; arg1 holds the delta value for the scroll
207F  8604                            lda     #$04                    ; command: scroll 
2081  B71819                          sta     GFX_BG_CMD              ; issue the command
                                      ; INCREMENT THE EXTENDED SCREEN BUFFER
2084  B61801                          lda     GFX_FLAGS
2087  840F                            anda    #$0F
2089  810C                            cmpa    #$0C
208B  2C10                            bge     81f
208D  8E0000                          ldx     #0
2090  BF1815          8               stx     GFX_EXT_ADDR
2093  7C1817                          inc     GFX_EXT_DATA
2096  3001                            leax    1,x
2098  8C0280                          cmpx    #640            ;#$0800
209B  26F3                            bne     8b
209D                  81              ; TOGGLE THE BACKBUFFERS
                                      ;lda    #$08            ; cmd: copy buffer front to back
                                      ;sta    GFX_BG_CMD                      
                                      ;lda    #$03            ; cmd: swap backbuffers
                                      ;sta    GFX_BG_CMD      ; send the command
209D  B61801                          lda     GFX_FLAGS       ; load current backbuffer
20A0  8820                            eora    #$20            ; toggle it
20A2  B71801                          sta     GFX_FLAGS       ; save the backbuffer
                                      ; COLOR CYCLE THE MOUSE CURSOR
20A5  8604                            lda     #4
20A7  B71823                          sta     CSR_PAL_INDX
20AA  FC1824                          ldd     CSR_PAL_DATA
20AD  C300A0                          addd    #$00a0
20B0  FD1824                          std     CSR_PAL_DATA            
                                      ; INCREMENT THE CYCLE COUNTER
20B3  7C2004                          inc     var_cycle       ; increment the cycle counter
20B6  B62004                          lda     var_cycle
20B9  8120                            cmpa    #num_cycles             ; max cycles yet?
20BB  2323                            bls     continue        ; nope, continue with the main loop
20BD  7F2004                          clr     var_cycle       ; reset the cycle count
                                      ; MODE CHANGES
20C0  F62005          6               ldb     var_mode_index
20C3  7C2005                          inc     var_mode_index
20C6  8E20FA                          ldx     #mode_data
20C9  A685                            lda     b,x
20CB  81FF                            cmpa    #$ff
20CD  270C                            beq     5f
20CF  B61801                          lda     GFX_FLAGS
20D2  84F0                            anda    #$f0
20D4  AA85                            ora     b,x
20D6  B71801                          sta     GFX_FLAGS
20D9  2005                            bra     continue
20DB  7F2005          5               clr     var_mode_index
20DE  20E0                            bra     6b
20E0                  continue        ; WAS [ESCAPE] PRESSED
20E0  B61A51                          lda     CHAR_Q_LEN
20E3  2787                            beq     2b
                                      ; check for ESCAPE
20E5  B61A53                          lda     CHAR_POP
20E8  811B                            cmpa    #$1b            ; [ESCAPE]
20EA  1026FF7E                        lbne    2b
                                      ; RESTORE THE MOUSE CURSOR COLOR
20EE  8604                            lda     #4
20F0  B71823                          sta     CSR_PAL_INDX
20F3  FC2006                          ldd     var_mouse_color
20F6  FD1824                          std     CSR_PAL_DATA
20F9  39              done            rts
                                      
                      ; ////////////////////////////////////////////////////
                      
                      ;mode_data      fcb     $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
                      ;               fcb     $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
                      
20FA  0001020304050607 mode_data       fcb     $00, $01, $02, $03, $04, $05, $06, $07
2102  08090A0B0C0C0C0C0D0E0F                 fcb     $08, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0d, $0e, $0f
                      
210D  FF                              fcb     $ff
