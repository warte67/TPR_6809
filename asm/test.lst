                      ; BUILD:        asm6809 -H -9 test.asm -o test.hex              
                                      
0010                                  org             $0010
                      ; EXEC_VECTOR
0010  2006            exe_vect        fdb             start
                      
                      
                      
                      
0012                                  INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_FLAGS       equ     $1800   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1801                  GFX_AUX equ     $1801   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1802                  GFX_TIMING_W    equ     $1802   ; (Word) horizontal timing
1804                  GFX_TIMING_H    equ     $1804   ; (Word) vertical timing
1806                  GFX_PAL_INDX    equ     $1806   ; (Byte) gfx palette index (0-15)
1807                  GFX_PAL_DATA    equ     $1807   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
1809                  GFX_FG_BEGIN    equ     $1809   ; start of paged foreground gfxmode registers
1809                  GFX_FG_WDTH     equ     $1809   ; (Byte) Foreground Unit Width-1
180A                  GFX_FG_HGHT     equ     $180a   ; (Byte) Foreground Unit Height-1
180A                  GFX_FG_END      equ     $180a   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
180B                  GFX_BG_BEGIN    equ     $180b   ; start of paged background gfxmode registers
180B                  GFX_EXT_ADDR    equ     $180b   ; (Word) 20K extended graphics addresses
180D                  GFX_EXT_DATA    equ     $180d   ; (Byte) 20K extended graphics RAM data
180D                  GFX_BG_END      equ     $180d   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
180E                  CSR_BEGIN       equ     $180e   ; start of mouse cursor hardware registers
180E                  CSR_XPOS        equ     $180e   ; (Word) horizontal mouse cursor coordinate
1810                  CSR_YPOS        equ     $1810   ; (Word) vertical mouse cursor coordinate
1812                  CSR_XOFS        equ     $1812   ; (Byte) horizontal mouse cursor offset
1813                  CSR_YOFS        equ     $1813   ; (Byte) vertical mouse cursor offset
1814                  CSR_SIZE        equ     $1814   ; (Byte) cursor size (0-15) 0:off
1815                  CSR_SCROLL      equ     $1815   ; (Signed) MouseWheel Scroll: -1, 0, 1
1816                  CSR_FLAGS       equ     $1816   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1817                  CSR_PAL_INDX    equ     $1817   ; (Byte) mouse cursor color palette index (0-15)
1818                  CSR_PAL_DATA    equ     $1818   ; (Word) mouse cursor color palette data RGBA4444
181A                  CSR_BMP_INDX    equ     $181a   ; (Byte) mouse cursor bitmap pixel offset
181B                  CSR_BMP_DATA    equ     $181b   ; (Byte) mouse cursor bitmap pixel index color
181B                  CSR_END equ     $181b   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
181C                  DBG_BEGIN       equ     $181c   ; Start of Debugger Hardware Registers
181C                  DBG_BRK_ADDR    equ     $181c   ; (Word) Address of current breakpoint
181E                  DBG_FLAGS       equ     $181e   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
181E                  DBG_END equ     $181e   ; End of the Debugger Hardware Registers
                      
                      
181F                  GFX_END equ     $181f   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
181F                  FIO_BEGIN       equ     $181f   ; start of file i/o hardware registers
181F                  FIO_ERR_FLAGS   equ     $181f   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 0-4: not yet assigned
1820                  FIO_COMMAND     equ     $1820   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
1821                  FIO_HANDLE      equ     $1821   ; (Byte) file handle or ZERO
1822                  FIO_BFROFS      equ     $1822   ; (Word) start of I/O buffer
1823                  FIO_BFRLEN      equ     $1823   ; (Word) length of I/O buffer
1825                  FIO_SEEKOFS     equ     $1825   ; (Word) seek offset
1827                  FIO_FILEPATH    equ     $1827   ; (Char Array 256) file path and argument buffer
1927                  FIO_END equ     $1927   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1928                  KEY_BEGIN       equ     $1928   ; start of keyboard hardware registers
1928                  CHAR_Q_LEN      equ     $1928   ; (char) # of characters waiting in queue       (Read Only)
1929                  CHAR_SCAN       equ     $1929   ; read next character in queue       (not popped when read)
192A                  CHAR_POP        equ     $192a   ; (char) next character waiting in queue (popped when read)
192B                  XKEY_BUFFER     equ     $192b   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
193B                  EDT_BFR_CSR     equ     $193b   ; (Byte) cursor position within the edit buffer      (Read)
193C                  EDT_BUFFER      equ     $193c   ; (256 Bytes) line editing character buffer          (Read)
1A3C                  KEY_END equ     $1a3c   ; end of keyboard hardware registers
                      
                      ;  Reserved Hardware:
1A3D                  RESERVED_HDW    equ     $1a3d   ; Reserved 1470 bytes ($1A3D - $1FFB)
                      
                      ;  Memory Bank Selects (16MB):
1FFC                  RAMBANK_SEL_1   equ     $1ffc   ; (Word)Indexes 65536 x 8kb banks
1FFE                  RAMBANK_SEL_2   equ     $1ffe   ; (Word)Indexes 65536 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      
2000                                  ORG             $2000
                      
2000  00              var_ch                  fcb             $00
2001  00              var_at                  fcb             $00
2002  00              var_count               fcb             $00
2003  FF              var_csr                 fcb             $ff
0020                  num_cycles              equ             $20
2004  00              var_cycle               fcb             $00
2005  00              var_mode_index  fcb             $00
                      
2006                  start
                      
                                              ; TESTING: fill the first 256 bytes of screen ram 
                                              ;               with ascending values to display
                                              
2006  8620                                    lda             #num_cycles             ; initially clear the cycle variable
2008  B72004                                  sta             var_cycle
                      
                      ;                       ; enable backbuffer mode
                      ;                       lda             GFX_FLAGS
                      ;                       ora             #$40
                      ;                       sta             GFX_FLAGS
                      
                                              ; set up the initial graphics mode 
200B  7F2005                                  clr             var_mode_index  ; start with index 0
200E  8E20CD                                  ldx             #mode_data
2011  B61800                                  lda             GFX_FLAGS
2014  84F0                                    anda    #$f0
2016  AA84                                    ora             ,x
2018  B71800                                  sta             GFX_FLAGS
                      
                                              ; fill the background buffer with incrementing values
201B  8E0000                                  ldx             #0
201E                  1
201E  BF180B                                  stx             GFX_EXT_ADDR
2021  B7180D                                  sta             GFX_EXT_DATA
2024  4C                                      inca
2025  81FF                                    cmpa    #$ff
2027  2601                                    bne             2f
2029  4F                                      clra
202A                  2
202A  3001                                    leax    1,x
202C  8C2800                                  cmpx    #$2800
202F  26ED                                    bne             1b
                      
                      
                      
                      ; ***********************
                      ; *  Pre-Fill and Cycle 
                      ; *  the Display Buffer
                      ; ***********************
                      
2031  7F2000                                  clr             var_ch                  ; character = 0
2034  7F2001                                  clr             var_at                  ; attribute = 0
2037  7F2002                                  clr             var_count               ; count = 0
203A  8E0400                                  ldx             #VIDEO_START    ; start of display buffer
203D                  1
203D  8C17FF                                  cmpx    #VIDEO_END              ; at the end of the buffer?
2040  2C1D                                    bge             2f                              ; yes, skip to the screen updates
2042  B62000                                  lda             var_ch                  ; load the current character
2045  F62001                                  ldb             var_at                  ; load the current attribute
2048  ED81                                    std             ,x++                    ; store both character and attribute
204A  7C2000                                  inc             var_ch                  ; next character
204D  7C2002                                  inc             var_count               ; increment count
2050  B62002                                  lda             var_count               ; load the count
2053  8111                                    cmpa    #17                             ; compare the count with this amount
2055  2DE6                                    blt             1b                              ; loop if count lower than
2057  7C2001                                  inc             var_at                  ; next attribute
205A  7F2002                                  clr             var_count               ; clear the count
205D  20DE                                    bra             1b                              ; resume the loop
                      
                                              ; INCREMENT THE SCREEN BUFFER
205F                  2
205F  8E0400                                  ldx             #VIDEO_START    ; start beginning of video buffer
2062                  4
2062  8C17FF                                  cmpx    #VIDEO_END              ; until the end of the video buffer
2065  2C06                                    bge             3f                              ; restart when past the end
2067  6C80                                    inc             ,x+                             ; increment character
2069  6C80                                    inc             ,x+                             ; increment the attribute
206B  20F5                                    bra             4b                              ; loop until done
206D                  3
                      
                      
                                              ; INCREMENT THE EXTENDED SCREEN BUFFER
206D  8E0000                                  ldx             #0
2070                  8                       
2070  BF180B                                  stx             GFX_EXT_ADDR
2073  7C180D                                  inc             GFX_EXT_DATA
2076  3001                                    leax    1,x
2078  8C0280                                  cmpx    #640            ;#$0800
207B  26F3                                    bne             8b
                      
                      
                      
                      
                                              ; TOGGLE THE BACKBUFFER
207D  B61800                                  lda             GFX_FLAGS       ; load current backbuffer
2080  8820                                    eora    #$20            ; toggle it
2082  B71800                                  sta             GFX_FLAGS       ; save the backbuffer
                      
                                              ; COLOR CYCLE THE MOUSE CURSOR
2085  8604                                    lda             #4
2087  B71817                                  sta             CSR_PAL_INDX
208A  FC1818                                  ldd             CSR_PAL_DATA
208D  C300A0                                  addd    #$00a0
2090  FD1818                                  std             CSR_PAL_DATA            
                      
                                              ; INCREMENT THE CYCLE COUNTER
2093  7C2004                                  inc             var_cycle       ; increment the cycle counter
2096  B62004                                  lda             var_cycle
2099  8120                                    cmpa    #num_cycles             ; max cycles yet?
209B  2323                                    bls             continue        ; nope, continue with the main loop
209D  7F2004                                  clr             var_cycle       ; reset the cycle count
                      
                                              ; MODE CHANGES
20A0                  6
20A0  F62005                                  ldb             var_mode_index
20A3  7C2005                                  inc             var_mode_index
20A6  8E20CD                                  ldx             #mode_data
20A9  A685                                    lda             b,x
20AB  81FF                                    cmpa    #$ff
20AD  270C                                    beq             5f
20AF  B61800                                  lda             GFX_FLAGS
20B2  84F0                                    anda    #$f0
20B4  AA85                                    ora             b,x
20B6  B71800                                  sta             GFX_FLAGS
20B9  2005                                    bra             continue
20BB                  5       
20BB  7F2005                                  clr             var_mode_index
20BE  20E0                                    bra             6b
20C0                  continue
                                              ; WAS [ESCAPE] PRESSED
20C0  B61928                                  lda             CHAR_Q_LEN
20C3  279A                                    beq             2b
                      
20C5  B61929                                  lda             CHAR_SCAN
20C8  811B                                    cmpa    #$1b
20CA  2693                                    bne             2b
                      
20CC  39              done            rts
                                      
                      ; ////////////////////////////////////////////////////
                      
                      ;mode_data      fcb             $08, $08, $08, $08, $08, $08, $08, $08
                      ;                       fcb             $08, $08, $08, $08, $08, $08, $08, $08
                      
20CD  0001020304050607 mode_data       fcb             $00, $01, $02, $03, $04, $05, $06, $07
20D5  08090A0B0C0D0E0F                         fcb             $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
                      
20DD  FF                                      fcb             $ff
