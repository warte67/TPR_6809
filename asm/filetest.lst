                      ; **** filetest.asm *********************************************
                      
0010                                  org             $0010
                      ; EXEC_VECTOR
0010  2001            exe_vect        fdb             start
                      
                      ; **** ***********************************************************
                      
0012                                  INCLUDE "mem_map.asm"
                      ;  **********************************************
                      ;  * Allocated 64k Memory Mapped System Symbols *
                      ;  **********************************************
                      
                      
                      ;  Zero-Page Kernal Variables:
0010                  SYSTEM_VARS     equ     $0010   ; start kernal vectors and variables
                      
                      ;  Stack Frames:
0100                  U_STK_BTM       equ     $0100   ; 256 bytes default user stack space
0200                  U_STK_TOP       equ     $0200   ; User Stack initial address
0200                  S_STK_BTM       equ     $0200   ; 512 bytes default system stack space
0400                  S_STK_TOP       equ     $0400   ; System Stack initial address
                      
                      ;  Video Buffer Memory (target = $0400):
0400                  VIDEO_START     equ     $0400   ; Start of 5KB Video Buffer Memory
17FF                  VIDEO_END       equ     $17ff   ; Last Byte of 5KB Video Buffer Memory
                      
                      ;  Graphics Hardware Registers:
1800                  GFX_BEGIN       equ     $1800   ; start of graphics hardware registers
1800                  GFX_CLK_DIV     equ     $1800   ; (Byte) 60 hz Clock Divider:
                                                      ;      bit 7: 0.46875 hz
                                                      ;      bit 6: 0.9375 hz
                                                      ;      bit 5: 1.875 hz
                                                      ;      bit 4: 3.75 hz
                                                      ;      bit 3: 7.5 hz
                                                      ;      bit 2: 15.0 hz
                                                      ;      bit 1: 30.0 hz
                                                      ;      bit 0: 60.0 hz
1801                  GFX_FLAGS       equ     $1801   ; (Byte) gfx system flags:
                                                      ;      bit 7: VSYNC
                                                      ;      bit 6: backbuffer enable
                                                      ;      bit 5: swap backbuffers (on write)
                                                      ;      bit 4: reserved
                                                      ;      bits 2-3 = 'Background' graphics modes (20KB buffer)
                                                      ;          0) NONE (forced black background)
                                                      ;          1) Tiled 16x16 mode
                                                      ;          2) Overscan Tile 16x16 mode
                                                      ;          3) 128x80 x 256-Colors
                                                      ;      bits 0-1 = 'Foreground' graphics modes (5KB buffer)
                                                      ;          0) 256x160 x 2-Color (with disable flag)
                                                      ;          1) Glyph Mode (32x20 text)
                                                      ;          2) Glyph Mode (64x40 text)
                                                      ;          3) 128x80 x 16-Color
1802                  GFX_AUX equ     $1802   ; (Byte) gfx auxillary/emulation flags:
                                                      ;      bit 7: 1:fullscreen / 0:windowed
                                                      ;      bit 6: reserved
                                                      ;      bit 5: reserved
                                                      ;      bit 4: reserved
                                                      ;      bit 3: reserved
                                                      ;      bit 0-2: monitor display index (0-7)
1803                  GFX_TIMING_W    equ     $1803   ; (Word) horizontal timing
1805                  GFX_TIMING_H    equ     $1805   ; (Word) vertical timing
1807                  GFX_PAL_INDX    equ     $1807   ; (Byte) gfx palette index (0-15)
1808                  GFX_PAL_DATA    equ     $1808   ; (Word) gfx palette color bits RGBA4444
                      
                      ;  Paged Foreground Graphics Mode Hardware Registers:
180A                  GFX_FG_BEGIN    equ     $180a   ; start of paged foreground gfxmode registers
180A                  GFX_FG_WDTH     equ     $180a   ; (Byte) Foreground Unit Width-1
180B                  GFX_FG_HGHT     equ     $180b   ; (Byte) Foreground Unit Height-1
180C                  GFX_FONT_IDX    equ     $180c   ; (Byte) Font Glyph Index
180D                  GFX_FONT_DAT    equ     $180d   ; (8-Bytes) Font Glyph Data Buffer
1814                  GFX_FG_END      equ     $1814   ; end of paged foreground gfxmode registers
                      
                      ;  Paged Background Graphics Mode Hardware Registers:
1815                  GFX_BG_BEGIN    equ     $1815   ; start of paged background gfxmode registers
1815                  GFX_EXT_ADDR    equ     $1815   ; (Word) 20K extended graphics addresses
1817                  GFX_EXT_DATA    equ     $1817   ; (Byte) 20K extended graphics RAM data
1818                  GFX_BG_ARG1     equ     $1818   ; (Byte) first read/write argument for the blit commands
1819                  GFX_BG_CMD      equ     $1819   ; (Byte) Blit Commands on the indexed bitmap buffer
                                                      ;      0x01: Clear Screen     (with color index in GFX_BG_ARG1)
                                                      ;      0x02: unassigned
                                                      ;      0x03: unassigned
                                                      ;      0x04: Scroll Left      (by pixels x GFX_BG_ARG1)
                                                      ;      0x05: Scroll Right     (by pixels x GFX_BG_ARG1)
                                                      ;      0x06: Scroll Up        (by pixels x GFX_BG_ARG1)
                                                      ;      0x07: Scroll Down      (by pixels x GFX_BG_ARG1)
                                                      ;      0x08: Copy Buffer      (From Active to Inactive)
1819                  GFX_BG_END      equ     $1819   ; end of paged background gfxmode registers
                      
                      ;  Mouse Cursor Hardware Registers:
181A                  CSR_BEGIN       equ     $181a   ; start of mouse cursor hardware registers
181A                  CSR_XPOS        equ     $181a   ; (Word) horizontal mouse cursor coordinate
181C                  CSR_YPOS        equ     $181c   ; (Word) vertical mouse cursor coordinate
181E                  CSR_XOFS        equ     $181e   ; (Byte) horizontal mouse cursor offset
181F                  CSR_YOFS        equ     $181f   ; (Byte) vertical mouse cursor offset
1820                  CSR_SIZE        equ     $1820   ; (Byte) cursor size (0-15) 0:off
1821                  CSR_SCROLL      equ     $1821   ; (Signed) MouseWheel Scroll: -1, 0, 1
1822                  CSR_FLAGS       equ     $1822   ; (Byte) mouse button flags:
                                                      ;      bits 0-5: button states
                                                      ;      bits 6-7: number of clicks
1823                  CSR_PAL_INDX    equ     $1823   ; (Byte) mouse cursor color palette index (0-15)
1824                  CSR_PAL_DATA    equ     $1824   ; (Word) mouse cursor color palette data RGBA4444
1826                  CSR_BMP_INDX    equ     $1826   ; (Byte) mouse cursor bitmap pixel offset
1827                  CSR_BMP_DATA    equ     $1827   ; (Byte) mouse cursor bitmap pixel index color
1827                  CSR_END equ     $1827   ; end of mouse cursor hardware registers
                      
                      ;  Debugger Hardware Registers:
1828                  DBG_BEGIN       equ     $1828   ; Start of Debugger Hardware Registers
1828                  DBG_BRK_ADDR    equ     $1828   ; (Word) Address of current breakpoint
182A                  DBG_FLAGS       equ     $182a   ; (Byte) Debug Specific Hardware Flags
                                                      ;      bit 7: Debug Enable
                                                      ;      bit 6: Single Step Enable
                                                      ;      bit 5: clear all breakpoints
                                                      ;      bit 4: Toggle Breakpoint at DEBUG_BRK_ADDRESS
                                                      ;      bit 3: FIRQ  (on low to high edge)
                                                      ;      bit 2: IRQ   (on low to high edge)
                                                      ;      bit 1: NMI   (on low to high edge)
                                                      ;      bit 0: RESET (on low to high edge)
182A                  DBG_END equ     $182a   ; End of the Debugger Hardware Registers
                      
                      
182B                  GFX_END equ     $182b   ; end of the GFX Hardware Registers
                      
                      ;  File I/O Hardware Registers:
182B                  FIO_BEGIN       equ     $182b   ; start of file i/o hardware registers
182B                  FIO_ERR_FLAGS   equ     $182b   ; (Byte) file i/o system flags:
                                                      ;      bit 7:   file not found
                                                      ;      bit 6:  end of file
                                                      ;      bit 5:   buffer overrun
                                                      ;      bit 4: wrong file type
                                                      ;      bit 3: directory not found
                                                      ;      bit 2: too many file handles
                                                      ;      bit 1: incorrect file handle
                                                      ;      bit 0: not yet assigned
182C                  FIO_COMMAND     equ     $182c   ; (Byte) OnWrite - command to execute
                                                      ;      $00 = Reset/Null
                                                      ;      $01 = Open/Create Binary File for Reading
                                                      ;      $02 = Open/Create Binary File for Writing
                                                      ;      $03 = Open/Create Binary File for Append
                                                      ;      $04 = Close File
                                                      ;      $05 = Read Byte
                                                      ;      $06 = Write Byte
                                                      ;      $07 = Load Hex Format File
                                                      ;      $08 = Write Hex Format Line
                                                      ;      $09 = Get File Length (FIO_BFRLEN = file length
                                                      ;      $0A = Load Binary File (read into FIO_BFROFS - FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0B = Save Binary File (wrote from FIO_BFROFS to FIO_BFROFS+FIO_BFRLEN)
                                                      ;      $0C = (not yet designed) List Directory
                                                      ;      $0D = Make Directory
                                                      ;      $0E = Change Directory
                                                      ;      $0F = Rename Directory
                                                      ;      $10 = Remove Directory
                                                      ;      $11 = Delete File
                                                      ;      $12 = Rename file
                                                      ;      $13 = Copy File
                                                      ;      $14 = Seek Start
                                                      ;      $15 = Seek Current
                                                      ;      $16 = Seek End
                                                      ;      $17 = SYSTEM: Shutdown
182D                  FIO_HANDLE      equ     $182d   ; (Byte) file handle or ZERO
182E                  FIO_BFROFS      equ     $182e   ; (Word) start of I/O buffer
182F                  FIO_BFRLEN      equ     $182f   ; (Word) length of I/O buffer
1831                  FIO_IODATA      equ     $1831   ; (Byte) input / output character
1832                  FIO_RET_COUNT   equ     $1832   ; (Byte) number of return entries
1833                  FIO_RET_INDEX   equ     $1833   ; (Byte) command return index
1834                  FIO_RET_BUFFER  equ     $1834   ; (Char Array 256) paged return buffer
1934                  FIO_FILEPATH    equ     $1934   ; (Char Array 256) file path and argument buffer
1A34                  FIO_END equ     $1a34   ; end of file i/o hardware registers
                      
                      ;  Keyboard Hardware Registers:
1A35                  KEY_BEGIN       equ     $1a35   ; start of keyboard hardware registers
1A35                  CHAR_Q_LEN      equ     $1a35   ; (char) # of characters waiting in queue       (Read Only)
1A36                  CHAR_SCAN       equ     $1a36   ; read next character in queue       (not popped when read)
1A37                  CHAR_POP        equ     $1a37   ; (char) next character waiting in queue (popped when read)
1A38                  XKEY_BUFFER     equ     $1a38   ; (128 bits) 16 bytes for XK_KEY data buffer    (Read Only)
1A48                  EDT_BFR_CSR     equ     $1a48   ; (Byte) cursor position within edit buffer    (Read/Write)
1A49                  EDT_BUFFER      equ     $1a49   ; (256 Bytes) line editing character buffer    (Read/Write)
1B49                  KEY_END equ     $1b49   ; end of keyboard hardware registers
                      
                      ;  Gamepad Hardware Registers:
1B4A                  JOYS_BEGIN      equ     $1b4a   ; start of gamepad hardware registers
1B4A                  JOYS_1_BTN      equ     $1b4a   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B4C                  JOYS_1_DBND     equ     $1b4c   ; (Byte) PAD 1 analog deadband; default is 5   (read/write)
1B4D                  JOYS_1_LTX      equ     $1b4d   ; (char) PAD 1 LThumb-X position (-128 _ +127)   (realtime)
1B4E                  JOYS_1_LTY      equ     $1b4e   ; (char) PAD 1 LThumb-Y position (-128 _ +127)   (realtime)
1B4F                  JOYS_1_RTX      equ     $1b4f   ; (char) PAD 1 RThumb-X position (-128 _ +127)   (realtime)
1B50                  JOYS_1_RTY      equ     $1b50   ; (char) PAD 1 RThumb-Y position (-128 _ +127)   (realtime)
1B51                  JOYS_1_Z1       equ     $1b51   ; (char) PAD 1 left trigger        (0 - 127)     (realtime)
1B52                  JOYS_1_Z2       equ     $1b52   ; (char) PAD 1 right trigger       (0 - 127)     (realtime)
                      
1B53                  JOYS_2_BTN      equ     $1b53   ; (Word) button bits: room for up to 16 buttons  (realtime)
1B55                  JOYS_2_DBND     equ     $1b55   ; (Byte) PAD 2 analog deadband; default is 5   (read/write)
1B56                  JOYS_2_LTX      equ     $1b56   ; (char) PAD 2 LThumb-X position (-128 _ +127)   (realtime)
1B57                  JOYS_2_LTY      equ     $1b57   ; (char) PAD 2 LThumb-Y position (-128 _ +127)   (realtime)
1B58                  JOYS_2_RTX      equ     $1b58   ; (char) PAD 2 RThumb-X position (-128 _ +127)   (realtime)
1B59                  JOYS_2_RTY      equ     $1b59   ; (char) PAD 2 RThumb-Y position (-128 _ +127)   (realtime)
1B5A                  JOYS_2_Z1       equ     $1b5a   ; (char) PAD 2 left trigger        (0 - 127)     (realtime)
1B5B                  JOYS_2_Z2       equ     $1b5b   ; (char) PAD 2 right trigger       (0 - 127)     (realtime)
1B5C                  JOYS_END        equ     $1b5c   ; end of gamepad hardware registers
                      
                      ;  Reserved Hardware:
1B5D                  RESERVED_HDW    equ     $1b5d   ; Reserved 1182 bytes ($1B5D - $1FFB)
                      
                      ;  Memory Bank Selects (external 2MB QSPI ISSI 16Mbit SerialRAM):
                      ;  https://www.mouser.com/ProductDetail/ISSI/IS66WVS2M8BLL-104NLI?qs=doiCPypUmgFx786bHGqGiQ%3D%3D
1FFE                  RAMBANK_SEL_1   equ     $1ffe   ; (Byte)Indexes 256 x 8kb banks
1FFF                  RAMBANK_SEL_2   equ     $1fff   ; (Byte)Indexes 256 x 8kb banks
                      
                      ;  Standard Usable (from FAST static 32KB) RAM:
2000                  RAM_START       equ     $2000   ; Begin System RAM (32k)
9FFF                  RAM_END equ     $9fff   ; End System RAM
                      
                      ;  Switchable RAM Banks (from SLOW external serial 16MB RAM chip):
A000                  RAM_BANK_1      equ     $a000   ; switched 8KB ram bank 1
C000                  RAM_BANK_2      equ     $c000   ; switched 8KB ram bank 2
                      
                      ;  Bios Kernal ROM:
E000                  BIOS_ROM        equ     $e000   ; Begin BIOS Kernal ROM (8KB)
                      
                      
                      
                      ; **** ***********************************************************
                      
2000                                  ORG             $2000
                      
2000  00              file_handle     fcb     $00     ; used to save a temporary file handle
                      
2001                  start   ; execution entry point
                      
                              ; enable debug mode
                              ;lda     #$C0
                              ;sta     DBG_FLAGS
                                      
                                      
                              ;ldx     #brk_here   ; set a breakpoint
                              ;stx     DBG_BRK_ADDR
                      
                      ; **** TEST: Write file ****************************************************        
                      
2001                  brk_here
2001  8D7B                    bsr     copy_filename
                      
                              ; CMD: open a file for writing (binary)
2003  8602                    lda     #$02        
2005  B7182C                  sta     FIO_COMMAND
                      
                              ; save the handle from the last file operation
2008  B6182D                  lda     FIO_HANDLE  
200B  B72000                  sta     file_handle 
                      
                              ; output the string to the file
200E  8E209E                  ldx     #test_file
2011  A680            1       lda     ,x+
2013  270A                    beq     2f
2015  B71831                  sta     FIO_IODATA
2018  C606                    ldb     #$06            ; CMD: write byte @ FIO_IODATA   
201A  F7182C                  stb     FIO_COMMAND
201D  20F2                    bra     1b
201F                  2
                              ; CMD: close a file
201F  B62000                  lda     file_handle
2022  B7182D                  sta     FIO_HANDLE
2025  8604                    lda     #$04        
2027  B7182C                  sta     FIO_COMMAND
                      
                      ; **** TEST: Append file ****************************************************
202A  8D52                    bsr     copy_filename
                              ; CMD: open a file for appending (binary)
202C  8603                    lda     #$03        
202E  B7182C                  sta     FIO_COMMAND
                              ; save the handle from the last file operation
2031  B6182D                  lda     FIO_HANDLE  
2034  B72000                  sta     file_handle 
                              ; output the string to the file
2037  8E2106                  ldx     #append_file
203A  A680            1       lda     ,x+
203C  270A                    beq     2f
203E  B71831                  sta     FIO_IODATA
2041  C606                    ldb     #$06            ; CMD: write byte @ FIO_IODATA   
2043  F7182C                  stb     FIO_COMMAND
2046  20F2                    bra     1b
2048                  2
                              ; CMD: close a file
2048  B62000                  lda     file_handle
204B  B7182D                  sta     FIO_HANDLE
204E  8604                    lda     #$04        
2050  B7182C                  sta     FIO_COMMAND
                      
                      ; **** TEST: Read file ****************************************************
                      
2053  8D29                    bsr     copy_filename
                              ; CMD: open a file for reading (binary)
2055  8601                    lda     #$01        
2057  B7182C                  sta     FIO_COMMAND
                              ; save the handle from the last file operation
205A  B6182D                  lda     FIO_HANDLE  
205D  B72000                  sta     file_handle 
                      ; read characters out to the screen
                              ; read a character from the file
2060  8605            1       lda     #$05
2062  B7182C                  sta     FIO_COMMAND
2065  B6182B                  lda     FIO_ERR_FLAGS
2068  2608                    bne     2f              ; EOF is an "error"
206A  B61831                  lda     FIO_IODATA
206D  BDE181                  jsr     $E181       ; ROM CALL: char_out
2070  20EE                    bra     1b
                      
2072                  2
                              ; CMD: close a file
2072  B62000                  lda     file_handle
2075  B7182D                  sta     FIO_HANDLE
2078  8604                    lda     #$04        
207A  B7182C                  sta     FIO_COMMAND
                      
                      
207D  39                      rts
                      
207E                  copy_filename
207E  8E208C                  ldx     #filename
2081  108E1934                ldy     #FIO_FILEPATH
2085  A680            1       lda     ,x+
2087  A7A0                    sta     ,y+
2089  26FA                    bne     1b
208B  39                      rts
                      
                      
208C  61736D2F746573742F746573742E74787400 filename    fcn     "asm/test/test.txt"
209E  546869732066696C65207761732067656E65726174656420627920746865202766696C65746573742E686578272070726F6772616D2E0A test_file   fcc     "This file was generated by the 'filetest.hex' program.\n"
20D5  486F706566756C6C792074686973206D6574686F642077696C6C20776F726B20696E20746865206675747572652E0A0A00             fcn     "Hopefully this method will work in the future.\n\n"
                      
2106  54686973206C696E652077617320617070656E6465642E0A00 append_file fcn     "This line was appended.\n"
